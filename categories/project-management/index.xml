<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Project Management on The Culture of Code</title>
    <link>https://konstantinpavlov.net/categories/project-management/index.xml</link>
    <description>Recent content in Project Management on The Culture of Code</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="https://konstantinpavlov.net/categories/project-management/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Application Development Top-Down</title>
      <link>https://konstantinpavlov.net/blog/2017/03/07/app-development-top-down/</link>
      <pubDate>Tue, 07 Mar 2017 08:48:34 +0200</pubDate>
      
      <guid>https://konstantinpavlov.net/blog/2017/03/07/app-development-top-down/</guid>
      <description>

&lt;p&gt;Delivering a product prototype to the client early is often very important to project success.
A client may have only general idea of a product he wants to get at the end and prototyping may save a lot of time and efforts of the team by reducing amount of unnecessary work.&lt;/p&gt;

&lt;p&gt;Accordingly, building web applications ground-up, starting from data model, may be a bad idea.&lt;/p&gt;

&lt;p&gt;The development usually starts from data modeling, persistence and service layers and, finally, the UI.&lt;/p&gt;

&lt;p&gt;The problem with ground-up approach is that client can&amp;rsquo;t see and play with the product on early development stages.
When a client gets first working prototype a lot of work has already done both on front-end and back-end side.
And if the prototype does not meet the client&amp;rsquo;s expectations, this work may be thrown away.&lt;/p&gt;

&lt;p&gt;When a significant changes are done to data model or when data model does not match well to domain model &amp;ndash; these are the signs that it was a gap in the analysis and prototyping phases of the project.&lt;/p&gt;

&lt;p&gt;Hopefully, agile methodologies can mitigate the problem:
&lt;a href=&#34;https://www.slideshare.net/RichardPDoerer/what-isagile-henrik-kniberg-august-20-2013/21&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;../../assets/2017/03/what-isagile-henrik-kniberg.jpg&#34; alt=&#34;&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s iterative development process with short iterations when each iteration adds some value. Client-side, server-side and DB are changed together in order to add new functionality. And the Client is always happy, even having a part of MVP.&lt;/p&gt;

&lt;p&gt;The question is: &lt;em&gt;&amp;laquo;Should Client be happy with a skateboard?&amp;raquo;&lt;/em&gt; In a real world Client may need to try a &amp;laquo;bicycle&amp;raquo; before he can say that it looks similar to product he would like to get at the end.&lt;/p&gt;

&lt;p&gt;In such conditions of uncertainty the top-down approach, &lt;strong&gt;&lt;em&gt;Development from Web Prototype,&lt;/em&gt;&lt;/strong&gt; may be better solution.
I&amp;nbsp;think it&amp;rsquo;s even more &amp;laquo;agile&amp;raquo; way since client&amp;rsquo;s feedback is collected earlier, reducing unnecessary work of the team.&lt;/p&gt;

&lt;h2 id=&#34;development-plan&#34;&gt;Development Plan&lt;/h2&gt;

&lt;p&gt;On following diagram you can see common development phases of the project on a timeline (Vision and Analysis phases were left behind the scene).&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;../../assets/2017/03/app-development-schedule-v1.svg&#34; alt=&#34;Application Development Schedule&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s assume, we&amp;rsquo;re going to develop a web application consuming REST API from back-end server.&lt;/p&gt;

&lt;h3 id=&#34;1-ui-prototype&#34;&gt;1. UI Prototype&lt;/h3&gt;

&lt;p&gt;The actual development starts with web application prototyping.
First UI mockups are created and presented to Client.
This is typically an single page application (SPA) written using some component framework: Angular, React, whatever developers are confident with. If there is some visual prototype or screen mockups then initial version can be created quickly.&lt;/p&gt;

&lt;h3 id=&#34;2-add-some-static-data&#34;&gt;2. Add Some Static Data&lt;/h3&gt;

&lt;p&gt;When initial application structure is clear, it&amp;rsquo;s the time to add some data. This should not be a real data as there is no real backend to provide it. It&amp;rsquo;s enough to create some json files and deploy them under &lt;code&gt;/assets&lt;/code&gt; or &lt;code&gt;/data&lt;/code&gt; folder along with application.&lt;/p&gt;

&lt;h3 id=&#34;3-start-defining-api-contract&#34;&gt;3. Start Defining API Contract&lt;/h3&gt;

&lt;p&gt;This static data is a foundation of future API specification (contract). The most popular format for writing API specifications is &lt;a href=&#34;https://swagger.io&#34; target=&#34;_blank&#34;&gt;OpenAPI/Swagger&lt;/a&gt;. It suites well for most common cases. Some aspects, like inheritance, are not clear enough in specification but the format is widely accepted in the industry so it&amp;rsquo;s a default choice.&lt;/p&gt;

&lt;p&gt;Alternative formats for describing API are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://apiblueprint.org/&#34; target=&#34;_blank&#34;&gt;API Blueprint&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.mashape.com&#34; target=&#34;_blank&#34;&gt;Mashape&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/mashery/iodocs&#34; target=&#34;_blank&#34;&gt;Mashery I/O Docs&lt;/a&gt;&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When you have Specification, you can automatically generate and publish API reference documentation.
This will used often by your team internally and you will publish it later if you decide to make your API public.&lt;/p&gt;

&lt;p&gt;There are tools on the market you can use to generate HTML documentation from API Specification.&lt;/p&gt;

&lt;h3 id=&#34;4-a-time-for-testing&#34;&gt;4. A Time for Testing&lt;/h3&gt;

&lt;p&gt;Now you have web application fed with static data. It&amp;rsquo;s time to write some tests.
You may start testing some base functionality you&amp;rsquo;re confident with.
Web Developers may start testing web components using JS-stuff like mocha, jasmine or similar framework.&lt;/p&gt;

&lt;p&gt;It is impossible to cover all the cases without real application server. Also, it is very difficult to test requests sent by UI application. But you can test simple scenarios like: &lt;em&gt;&amp;laquo;WHEN user requests some url THEN expected data is shown on page&amp;raquo;.&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&#34;5-even-for-system-integration-testing&#34;&gt;5. â€¦Even for System Integration Testing&lt;/h3&gt;

&lt;p&gt;Webapp functional end-to-end testing with test data can be done by web developers.&lt;/p&gt;

&lt;p&gt;System integration testing is usually done by QA team and employs both web and back-end developers.
It usually covers complex interaction scenarios between front-end and back-end.&lt;/p&gt;

&lt;p&gt;Common tool used for system integration testing is &lt;a href=&#34;http://www.seleniumhq.org&#34; target=&#34;_blank&#34;&gt;Selenium&lt;/a&gt;.
Sometimes it is also necessary to develop some extra tools for direct access to underlaying data and external system emulators (test doubles).
And often the team will end up designing a custom test DSL to simplify writing this kind of tests&lt;/p&gt;

&lt;p&gt;There is a long way to go but even now it&amp;rsquo;s possible to star writing some simple tests&lt;/p&gt;

&lt;p&gt;And it is now possible to start creating System Integration tests.
Even you have no back-end yet, you defined an expected data in static files so there is nothing preventing from using a heavy stuff like Selenium.&lt;/p&gt;

&lt;h3 id=&#34;6-starting-back-end-mock-controllers&#34;&gt;6. Starting Back-End: Mock Controllers&lt;/h3&gt;

&lt;p&gt;We have a contract (API specification) and test data in static files (data should match the contract).
We have also some system integration tests.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s concentrate on deployment and testing. We don&amp;rsquo;t need to implement services and data layer so far.&lt;/p&gt;

&lt;p&gt;Now we need a back-end and full deployment cycle to test both front-end and back-end together.
From a API specification we may generate data transfer objects and interfaces of front controllers.
Then we should implement controllers so they return the same test data.
Mock controllers are enough. They may serve the same static data as for webapp.&lt;/p&gt;

&lt;p&gt;The most important that after completing this step our system integration tests should run against real UI working win real server. And tests should be green.&lt;/p&gt;

&lt;h3 id=&#34;7-continuing-back-end-controllers-and-mock-dao&#34;&gt;7. Continuing Back-End: Controllers and Mock DAO&lt;/h3&gt;

&lt;p&gt;Now it&amp;rsquo;s time to implement services, one by one. Database is still not necessary - we may mock persistence (DAO) layer.
The tests still should be green and we may add more tests now since we have Services now.&lt;/p&gt;

&lt;h3 id=&#34;8-continuing-back-end-real-database-and-dao&#34;&gt;8. Continuing Back-End: Real Database and DAO&lt;/h3&gt;

&lt;p&gt;Now we should design our persistence layer, create DAO add test data so the tests are still green.
After that we&amp;rsquo;ll have all components in our system:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Web Application&lt;/li&gt;
&lt;li&gt;REST API Specification&lt;/li&gt;
&lt;li&gt;Backend: Controllers, Services, DAO&lt;/li&gt;
&lt;li&gt;Database&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now let&amp;rsquo;s continue with short interactions affecting all system layers.&lt;/p&gt;

&lt;h2 id=&#34;final-notes&#34;&gt;Final Notes&lt;/h2&gt;

&lt;p&gt;This not a methodology. It&amp;rsquo;s just the idea of how to minimize unnecessary work in conditions of business uncertainty.&lt;/p&gt;

&lt;p&gt;You should not use this instruction blindly. Some steps may be omitted or combined for your project.&lt;/p&gt;

&lt;h2 id=&#34;links&#34;&gt;Links&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.slideshare.net/RichardPDoerer/what-isagile-henrik-kniberg-august-20-2013/21&#34; target=&#34;_blank&#34;&gt;&amp;laquo;What is Agile&amp;raquo; by Henrik Kniberg&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Recommended Scrum Persentations</title>
      <link>https://konstantinpavlov.net/blog/2014/08/30/recommended-scrum-persentations/</link>
      <pubDate>Sat, 30 Aug 2014 07:46:20 +0000</pubDate>
      
      <guid>https://konstantinpavlov.net/blog/2014/08/30/recommended-scrum-persentations/</guid>
      <description>&lt;p&gt;For those, who not yet familiar with Scrum, I highly recommend to watch the &lt;a href=&#34;http://scrumtrainingseries.com/&#34; target=&#34;_blank&#34;&gt;&amp;laquo;Scrum Training Series&amp;raquo; presentations&lt;/a&gt; and the &lt;a href=&#34;http://agilemethodology.org/&#34; target=&#34;_blank&#34;&gt;AgileMethodology.org&lt;/a&gt; website.&lt;/p&gt;

&lt;p&gt;A &lt;a href=&#34;http://scrumreferencecard.com/scrum-reference-card/&#34; target=&#34;_blank&#34;&gt;Scrum Reference Card&lt;/a&gt; is also useful to understand what the Scrum is, it&amp;rsquo;s processes, roles and practices.&lt;/p&gt;

&lt;p&gt;The presentations describes the Scrum process step by step.&lt;/p&gt;

&lt;h2 id=&#34;introduction-to-scrum&#34;&gt;Introduction to Scrum&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://scrumtrainingseries.com/Intro_to_Scrum/Intro_to_Scrum.htm&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;http://agilemethodology.org/intro.png&#34; alt=&#34;Introduction to Scrum Presentation&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;
- What is Scrum? What is Agile? What is a Sprint? WARNING: Scrum rules and feedback loops are disruptive, exposing organizational impediments.
- Responsibilities of the Product Owner, Scrum Development Team, and Scrum Master.Definition of Product Backlog and Sprint Backlog. Five Scrum meetings and example schedule.
- Scrum Quiz, a practice test to help prepare for class and the Certified Scrum Master (CSM) exam, or others (PSM, PMI-ACP, etc.). You might prefer to return to the quiz after completing modules 2-6.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://scrumtrainingseries.com/Intro_to_Scrum/Intro_to_Scrum.htm&#34; target=&#34;_blank&#34;&gt;http://scrumtrainingseries.com/Intro_to_Scrum/Intro_to_Scrum.htm&lt;/a&gt;
(&lt;a href=&#34;http://scrumtrainingseries.com/Intro_to_Scrum/&#34; target=&#34;_blank&#34;&gt;HTML5 version&lt;/a&gt;)&lt;/p&gt;

&lt;h2 id=&#34;backlog-refinement-meeting-aka-backlog-grooming&#34;&gt;Backlog Refinement Meeting (aka. Backlog Grooming)&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://scrumtrainingseries.com/BacklogRefinementMeeting/BacklogRefinementMeeting.htm&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;http://agilemethodology.org/brm.png&#34; alt=&#34;Backlog Refinement Meeting Presentation&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;When do we groom the product backlog? What is the purpose of the meeting? Who participates?&lt;/li&gt;
&lt;li&gt;Example epics.&lt;/li&gt;
&lt;li&gt;Example Bill Wake INVEST (Independent, Negotiable, Valuable, Estimable, Small, Testable) user stories.&lt;/li&gt;
&lt;li&gt;Example acceptance criteria (vs. definition of done).&lt;/li&gt;
&lt;li&gt;The roles of the Product Owner, Scrum Master, and self-organizing team in backlog refinement.&lt;/li&gt;
&lt;li&gt;Timeboxing the meeting.&lt;/li&gt;
&lt;li&gt;Relative effort estimation game (aka. Mike Cohn &amp;laquo;Planning Poker&amp;raquo;) variation with T-shirt sizes and story points.&lt;/li&gt;
&lt;li&gt;Scope control: Focusing on high business value work, deferring low ROI work, force-ranking the Product Backlog.&lt;/li&gt;
&lt;li&gt;Estimation vs. commitment.&lt;/li&gt;
&lt;li&gt;Gratuitous &amp;laquo;Dukes of Hazzard&amp;raquo; chase scene with banjo music.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;http://scrumtrainingseries.com/BacklogRefinementMeeting/BacklogRefinementMeeting.htm&#34; target=&#34;_blank&#34;&gt;http://scrumtrainingseries.com/BacklogRefinementMeeting/BacklogRefinementMeeting.htm&lt;/a&gt;
(&lt;a href=&#34;http://scrumtrainingseries.com/BacklogRefinementMeeting/&#34; target=&#34;_blank&#34;&gt;HTML5 version&lt;/a&gt;)&lt;/p&gt;

&lt;h2 id=&#34;sprint-planning-meeting&#34;&gt;Sprint Planning Meeting&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://scrumtrainingseries.com/SprintPlanningMeeting/SprintPlanningMeeting.htm&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;http://agilemethodology.org/spm.png&#34; alt=&#34;&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Purpose of the Sprint Planning meeting.&lt;/li&gt;
&lt;li&gt;The roles of the Product Owner, Scrum Master, and Scrum Development Team in Sprint Planning.&lt;/li&gt;
&lt;li&gt;Sprint Planning Meeting timebox (maximum duration) and Sprint execution timebox.
Example Product Backlog Items (PBIs, or user stories), Sprint Goals, and Sprint Tasks. - Difference between the Product Backlog and Sprint Backlog.&lt;/li&gt;
&lt;li&gt;Slack required for innovation.&lt;/li&gt;
&lt;li&gt;Two part Sprint Planning vs. commitment-based planning.&lt;/li&gt;
&lt;li&gt;Starting with a usable Product Backlog (thanks to continuous Backlog Refinement Meetings).&lt;/li&gt;
&lt;li&gt;Example schedule for a two-week Sprint.&lt;/li&gt;
&lt;li&gt;Definition of Done: Planning a Sprint that includes all activities needed to develop a potentially shippable product increment, particularly testing.&lt;/li&gt;
&lt;li&gt;The Lean principle of reducing work in progress (WIP).&lt;/li&gt;
&lt;li&gt;The self managing team&amp;rsquo;s ownership of its commitments. Saying &amp;laquo;no&amp;raquo; when necessary.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;http://scrumtrainingseries.com/SprintPlanningMeeting/SprintPlanningMeeting.htm&#34; target=&#34;_blank&#34;&gt;http://scrumtrainingseries.com/SprintPlanningMeeting/SprintPlanningMeeting.htm&lt;/a&gt;
(&lt;a href=&#34;http://scrumtrainingseries.com/SprintPlanningMeeting/&#34; target=&#34;_blank&#34;&gt;HTML5 version&lt;/a&gt;)&lt;/p&gt;

&lt;h2 id=&#34;daily-scrum-meeting-aka-15-minute-standup&#34;&gt;Daily Scrum Meeting (aka. 15-minute Standup)&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://scrumtrainingseries.com/DailyScrumMeeting/DailyScrumMeeting.htm&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;http://agilemethodology.org/dsm.png&#34; alt=&#34;Daily Scrum Meeting Presentation&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;What is the purpose of the standup? When do we have the meeting?&lt;/li&gt;
&lt;li&gt;Example answers to the three questions: What I did yesterday, what I will do today, what impedes me.&lt;/li&gt;
&lt;li&gt;Organizational impediments and the role of the Scrum Master during Sprint execution.&lt;/li&gt;
&lt;li&gt;Team self organization during the Sprint. (&amp;laquo;The team is utterly self managing.&amp;raquo; &amp;ndash; Ken Schwaber)&lt;/li&gt;
&lt;li&gt;Team&amp;rsquo;s use of the taskboard (sometimes mislabeled &amp;laquo;Kanban board&amp;raquo;) to represent the Sprint Backlog.&lt;/li&gt;
&lt;li&gt;Example Sprint Tasks.&lt;/li&gt;
&lt;li&gt;Team&amp;rsquo;s collective ownership of Product Backlog Items and Sprint Tasks.&lt;/li&gt;
&lt;li&gt;Less skilled team member as point person of a Sprint Task.&lt;/li&gt;
&lt;li&gt;Cursory overview of Agile engineering practices: Pair programming, Test-Driven Development (TDD), refactoring, and continuous integration.&lt;/li&gt;
&lt;li&gt;Should the Product Owner attend the Daily Scrum?&lt;/li&gt;
&lt;li&gt;Use of the sidebar to stay within the 15-minute timebox.&lt;/li&gt;
&lt;li&gt;Involving traditional QA people in Agile development.
What happens when team members ignore team agreements?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;http://scrumtrainingseries.com/DailyScrumMeeting/DailyScrumMeeting.htm&#34; target=&#34;_blank&#34;&gt;http://scrumtrainingseries.com/DailyScrumMeeting/DailyScrumMeeting.htm&lt;/a&gt;
(&lt;a href=&#34;http://scrumtrainingseries.com/DailyScrumMeeting/&#34; target=&#34;_blank&#34;&gt;HTML5 version&lt;/a&gt;)&lt;/p&gt;

&lt;h2 id=&#34;sprint-review-meeting&#34;&gt;Sprint Review Meeting&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://scrumtrainingseries.com/SprintReviewMeeting/SprintReviewMeeting.htm&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;http://agilemethodology.org/srm.png&#34; alt=&#34;Sprint Review Meeting Presentation&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;What is the purpose of the Sprint Review Meeting? When do we have the Sprint Review Meeting?&lt;/li&gt;
&lt;li&gt;Extrinsic manipulation (e.g. praise) considered harmful to intrinsic motivation and transparency.&lt;/li&gt;
&lt;li&gt;Demonstrate a potentially shippable (properly tested) product increment every Sprint, even if it&amp;rsquo;s small.&lt;/li&gt;
&lt;li&gt;Stick to clear goals each Sprint, avoid temptation to work outside agreed scope.&lt;/li&gt;
&lt;li&gt;We usually discover new things to do faster than we get things done. Add newly discovered requirements to the Product Backlog.&lt;/li&gt;
&lt;li&gt;The Product Owner&amp;rsquo;s role in scope control, reprioritization and release plan adjustment every Sprint.
The Product Owner publically declares which PBIs are done.&lt;/li&gt;
&lt;li&gt;How to measure velocity using story points. What is the purpose of velocity? When are metrics harmful?&lt;/li&gt;
&lt;li&gt;Definition of done. Incomplete work returned to the Product Backlog for reprioritization.&lt;/li&gt;
&lt;li&gt;Outside stakeholders attend the Sprint Review Meeting, provide feedback at the end.&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- http://scrumreferencecard.com/MacroMeasurementWhitepaper.pdf --&gt;

&lt;p&gt;&lt;a href=&#34;http://scrumtrainingseries.com/SprintReviewMeeting/SprintReviewMeeting.htm&#34; target=&#34;_blank&#34;&gt;http://scrumtrainingseries.com/SprintReviewMeeting/SprintReviewMeeting.htm&lt;/a&gt;
(&lt;a href=&#34;http://scrumtrainingseries.com/SprintReviewMeeting/&#34; target=&#34;_blank&#34;&gt;HTML5 version&lt;/a&gt;)&lt;/p&gt;

&lt;h2 id=&#34;sprint-retrospective-meeting&#34;&gt;Sprint Retrospective Meeting&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://scrumtrainingseries.com/SprintRetrospectiveMeeting/SprintRetrospectiveMeeting.htm&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;http://agilemethodology.org/retrospective.png&#34; alt=&#34;Sprint Retrospective Meeting Presentation&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;What is the purpose of the Sprint Retrospective Meeting? When do we have the Sprint Retrospective Meeting?&lt;/li&gt;
&lt;li&gt;Only learning teams and learning organizations will thrive in the future. A Scrum Master must create this environment for learning, despite the traditional habit of focusing on micro-efficiency.&lt;/li&gt;
&lt;li&gt;To remain a neutral facilitator, Scrum Master has a role outside the team. (Note to certification candidates: Some tests may require you to answer that the Product Owner and Scrum Master are &amp;laquo;on the team,&amp;raquo; an unfortunate oversimplification.)&lt;/li&gt;
&lt;li&gt;Why we need status leveling techniques.&lt;/li&gt;
&lt;li&gt;How to conduct a safety check. (Example responses shown were a real team&amp;rsquo;s actual responses. Note the point spread!)&lt;/li&gt;
&lt;li&gt;The invisible gun no one will tell you you&amp;rsquo;re wearing.&lt;/li&gt;
&lt;li&gt;Group size, unclear Product Ownership, contract relationships, and geographic distribution are usually impediments to full safety.&lt;/li&gt;
&lt;li&gt;Classic Scrum Retrospective (What went well? What could be improved? What did we learn? What still puzzles us?) and example actions.&lt;/li&gt;
&lt;li&gt;People tend to push for particular solutions before agreeing on the problems. Focused conversation principles (ORID: Objective questions, Reflective questions, Interpretive questions, Decision questions) can help.&lt;/li&gt;
&lt;li&gt;Use silent writing to elicit multiple perspectives.&lt;/li&gt;
&lt;li&gt;Retrospective is for the team, not those outside it.&lt;/li&gt;
&lt;li&gt;An example timeline retrospective.&lt;/li&gt;
&lt;li&gt;As the team matures, the Scrum Master&amp;rsquo;s role shifts toward transforming the outer organization.&lt;/li&gt;
&lt;li&gt;Effective decision making for teams.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;http://scrumtrainingseries.com/SprintRetrospectiveMeeting/SprintRetrospectiveMeeting.htm&#34; target=&#34;_blank&#34;&gt;http://scrumtrainingseries.com/SprintRetrospectiveMeeting/SprintRetrospectiveMeeting.htm&lt;/a&gt;
(&lt;a href=&#34;http://scrumtrainingseries.com/SprintRetrospectiveMeeting/&#34; target=&#34;_blank&#34;&gt;HTML5 version&lt;/a&gt;)&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Book: Good Old &#34;Peopleware&#34;</title>
      <link>https://konstantinpavlov.net/blog/2012/05/25/book-good-old-peopleware/</link>
      <pubDate>Fri, 25 May 2012 09:40:00 +0400</pubDate>
      
      <guid>https://konstantinpavlov.net/blog/2012/05/25/book-good-old-peopleware/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://amzn.com/0932633439&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;http://ecx.images-amazon.com/images/I/51MlUgcSICL._SL500_SS225_.jpg&#34; alt=&#34;Peopleware: Productive Projects and Teams&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;One more book worth reading - &amp;laquo;Peopleware: Productive Projects and Teams&amp;raquo; by Tom DeMarco and Timothy Lister.
It&amp;rsquo;s essentially a Holy Bible for every manager!&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>