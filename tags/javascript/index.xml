<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Javascript on The Culture of Code</title>
    <link>https://konstantinpavlov.net/tags/javascript/index.xml</link>
    <description>Recent content in Javascript on The Culture of Code</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="https://konstantinpavlov.net/tags/javascript/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>DevMode Javascript Exception Handler</title>
      <link>https://konstantinpavlov.net/blog/2016/02/11/devmode-javascript-exception-handler/</link>
      <pubDate>Thu, 11 Feb 2016 23:09:16 +0000</pubDate>
      
      <guid>https://konstantinpavlov.net/blog/2016/02/11/devmode-javascript-exception-handler/</guid>
      <description>StackOverflow-driven JS development:
try { something } catch (e) { window.open(&#39;https://stackoverflow.com/search?q=[js]+&amp;quot;&#39; + e.message + &#39;&amp;quot;&#39;); }  </description>
    </item>
    
    <item>
      <title>Self-Hosted Web Analytics Solution for AngularJS</title>
      <link>https://konstantinpavlov.net/blog/2015/06/03/self-hosted-web-analytics-solution-for-angularjs/</link>
      <pubDate>Wed, 03 Jun 2015 19:05:12 +0000</pubDate>
      
      <guid>https://konstantinpavlov.net/blog/2015/06/03/self-hosted-web-analytics-solution-for-angularjs/</guid>
      <description>There are situations when you need to analyze user&amp;rsquo;s experience but can&amp;rsquo;t use a third-party web analytics solutions like Google Analytics or Yandex Metrika. For example, if your production environment is PCI DSS compliant. In this case you have to deploy self-hosted analytics engine and inside your environment and configure user actions tracking in your application.
One of the possible solutions is the piwik as analytics engine + Angulartics or angular-piwik for tracking events inside AngularJS application.</description>
    </item>
    
    <item>
      <title>Loading Indicators for AngularJS</title>
      <link>https://konstantinpavlov.net/blog/2015/06/02/loading-indicators-for-angularjs/</link>
      <pubDate>Tue, 02 Jun 2015 18:44:43 +0000</pubDate>
      
      <guid>https://konstantinpavlov.net/blog/2015/06/02/loading-indicators-for-angularjs/</guid>
      <description>Modern web application should be user friendly and notify the User when time consuming operation is on the way, e.g. uploading file or downloading data. There are a some solutions for AngularJS which are fairy easy to integrate.
First one is Angular Loading Bar. It can be attached to your application with almost zero configuration and does not affect application design. It attaches the interceptor to $http service and displays a thin progressbar on the top edge of the page.</description>
    </item>
    
    <item>
      <title>Tags Input Control for AngularJS</title>
      <link>https://konstantinpavlov.net/blog/2015/05/30/tags-input-control-for-angularjs/</link>
      <pubDate>Sat, 30 May 2015 09:53:19 +0000</pubDate>
      
      <guid>https://konstantinpavlov.net/blog/2015/05/30/tags-input-control-for-angularjs/</guid>
      <description>Stay DRY! Don&amp;rsquo;t waste your time implementing tags input control for AngularJS yourself! There is an excellent AngularJS module for that called &amp;laquo;ngTagsInput&amp;raquo;. It&amp;rsquo;s also supports autocomptetion, validations,custom styles and templates. See the demos.
It took me just 10 minutes to add that type of control to my application.
All you need to do is: 1. Add NPM or Bower dependency
npm install ng-tags-input --save bower install ng-tags-input --save   Include script and CSS to your html page.</description>
    </item>
    
    <item>
      <title>ng-grid: library for building dynamic data-grid for AngularJS</title>
      <link>https://konstantinpavlov.net/blog/2014/06/09/ng-grid-library-for-building-dynamic-data-grid-for-angularjs/</link>
      <pubDate>Mon, 09 Jun 2014 11:51:21 +0300</pubDate>
      
      <guid>https://konstantinpavlov.net/blog/2014/06/09/ng-grid-library-for-building-dynamic-data-grid-for-angularjs/</guid>
      <description>&lt;p&gt;I was a curious if there is a solution for implementing dynamic grids for AngularJS.&lt;/p&gt;

&lt;p&gt;In particular, it should provide following basic features like server-side filtering, sorting and paging.
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Javascript Solari Board</title>
      <link>https://konstantinpavlov.net/blog/2013/12/21/javascript-solari-board/</link>
      <pubDate>Sat, 21 Dec 2013 22:07:59 +0200</pubDate>
      
      <guid>https://konstantinpavlov.net/blog/2013/12/21/javascript-solari-board/</guid>
      <description>Solari Board is a javascript app for displaying some status information. For example, it can be used to scheduling support team activity or displaying project build status from CI server (e.g. Jenkins)
This article with a video about how the guys from FogCreek software has integrated SolariBoard into BigBoard to monitor their support team activity.</description>
    </item>
    
    <item>
      <title>Crearing an array in JavaScript</title>
      <link>https://konstantinpavlov.net/blog/2013/01/27/crearing-an-array-in-javascript/</link>
      <pubDate>Sun, 27 Jan 2013 17:26:00 +0200</pubDate>
      
      <guid>https://konstantinpavlov.net/blog/2013/01/27/crearing-an-array-in-javascript/</guid>
      <description>&lt;p&gt;Since it may be references to existing javascript array from other objects, the best way to clear array contents is assign its length to zero:&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>