<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Quality Assurance on The Culture of Code</title>
    <link>https://konstantinpavlov.net/tags/quality-assurance/index.xml</link>
    <description>Recent content in Quality Assurance on The Culture of Code</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="https://konstantinpavlov.net/tags/quality-assurance/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Application Development Top-Down</title>
      <link>https://konstantinpavlov.net/blog/2017/03/07/app-development-top-down/</link>
      <pubDate>Tue, 07 Mar 2017 08:48:34 +0200</pubDate>
      
      <guid>https://konstantinpavlov.net/blog/2017/03/07/app-development-top-down/</guid>
      <description>Typical management and technical mistake when developing web applications is building the system ground-up, from persistence level to web. The development usually starts from data modeling, persistence and service layers and, finally, the UI.
The problem with ground-up approach is that Client can&amp;rsquo;t see and play with the product on early development stages. When a Client gets first working prototype a lot of work has been done both on front-end and back-end side.</description>
    </item>
    
    <item>
      <title>How to Start Testing UI Before Backend is Ready</title>
      <link>https://konstantinpavlov.net/blog/2017/02/23/how-to-start-testing-ui-before-backend-is-ready/</link>
      <pubDate>Thu, 23 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://konstantinpavlov.net/blog/2017/02/23/how-to-start-testing-ui-before-backend-is-ready/</guid>
      <description>Recently I was asked how to start with testing UI before backend is completed.
It depends on the product a lot. But when we&amp;rsquo;re talking about web, it is often not clear how the final solution should look like and behave. If so, it is not reasonable to spend much time writing UI tests using tools like Selenium before the first prototype is ready. It is not reasonable to write a presentation layer and, in some cases, a business logic on server side before it is clear what kind of data is required for UI.</description>
    </item>
    
    <item>
      <title>Selenium Tests with Maven and Selenide</title>
      <link>https://konstantinpavlov.net/blog/2016/05/12/selenium-tests-with-maven-and-selenide/</link>
      <pubDate>Thu, 12 May 2016 16:26:25 +0000</pubDate>
      
      <guid>https://konstantinpavlov.net/blog/2016/05/12/selenium-tests-with-maven-and-selenide/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://selenide.org&#34; target=&#34;_blank&#34;&gt;Selenide&lt;/a&gt; is nice wrapper around selenium web driver allowing to simplify writting UI tests with Selenium.&lt;/p&gt;

&lt;p&gt;Some of the cook features are:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;jquery-like selector syntax, e.g. &lt;code&gt;$(&amp;quot;div.myclass&amp;quot;).is(Condition.visible)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Automatic screenshots on assertion failure&lt;/li&gt;
&lt;li&gt;Easy starting Selenium WebDriver&lt;/li&gt;
&lt;li&gt;And &lt;a href=&#34;http://selenide.org/quick-start.html&#34; target=&#34;_blank&#34;&gt;others&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;So, let&amp;rsquo;s write some tests on selenide and make it run from maven in a normal browser or in headless mode.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Recalling Testing Principles</title>
      <link>https://konstantinpavlov.net/blog/2015/01/28/recalling-testing-principles/</link>
      <pubDate>Wed, 28 Jan 2015 23:04:54 +0000</pubDate>
      
      <guid>https://konstantinpavlov.net/blog/2015/01/28/recalling-testing-principles/</guid>
      <description>If you are involved in software development then recalling a basic testing principles once again is not a waste of time. So here are the principles:
 A necessary part of a test case is a definition of the expected output or result. A programmer should avoid attempting to test his or her own program. A programming organization should not test its own programs. Any testing process should include a thorough inspection of the results of each test.</description>
    </item>
    
  </channel>
</rss>