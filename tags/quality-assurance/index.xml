<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Quality Assurance on The Culture of Code</title>
    <link>https://konstantinpavlov.net/tags/quality-assurance/index.xml</link>
    <description>Recent content in Quality Assurance on The Culture of Code</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="https://konstantinpavlov.net/tags/quality-assurance/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Application Development Top-Down</title>
      <link>https://konstantinpavlov.net/blog/2017/03/07/app-development-top-down/</link>
      <pubDate>Tue, 07 Mar 2017 08:48:34 +0200</pubDate>
      
      <guid>https://konstantinpavlov.net/blog/2017/03/07/app-development-top-down/</guid>
      <description>

&lt;p&gt;Delivering a product prototype to the client early is often very important to project success.
A client may have only general idea of a product he wants to get at the end and prototyping may save a lot of time and efforts of the team by reducing amount of unnecessary work.&lt;/p&gt;

&lt;p&gt;Accordingly, building web applications ground-up, starting from data model, may be a bad idea.&lt;/p&gt;

&lt;p&gt;The development usually starts from data modeling, persistence and service layers and, finally, the UI.&lt;/p&gt;

&lt;p&gt;The problem with ground-up approach is that client can&amp;rsquo;t see and play with the product on early development stages.
When a client gets first working prototype a lot of work has already done both on front-end and back-end side.
And if the prototype does not meet the client&amp;rsquo;s expectations, this work may be thrown away.&lt;/p&gt;

&lt;p&gt;When a significant changes are done to data model or when data model does not match well to domain model &amp;ndash; these are the signs that it was a gap in the analysis and prototyping phases of the project.&lt;/p&gt;

&lt;p&gt;Hopefully, agile methodologies can mitigate the problem:
&lt;a href=&#34;https://www.slideshare.net/RichardPDoerer/what-isagile-henrik-kniberg-august-20-2013/21&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;../../assets/2017/03/what-isagile-henrik-kniberg.jpg&#34; alt=&#34;&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s iterative development process with short iterations when each iteration adds some value. Client-side, server-side and DB are changed together in order to add new functionality. And the Client is always happy, even having a part of MVP.&lt;/p&gt;

&lt;p&gt;The question is: &lt;em&gt;&amp;laquo;Should Client be happy with a skateboard?&amp;raquo;&lt;/em&gt; In a real world Client may need to try a &amp;laquo;bicycle&amp;raquo; before he can say that it looks similar to product he would like to get at the end.&lt;/p&gt;

&lt;p&gt;In such conditions of uncertainty the top-down approach, &lt;strong&gt;&lt;em&gt;Development from Web Prototype,&lt;/em&gt;&lt;/strong&gt; may be better solution.
I&amp;nbsp;think it&amp;rsquo;s even more &amp;laquo;agile&amp;raquo; way since client&amp;rsquo;s feedback is collected earlier, reducing unnecessary work of the team.&lt;/p&gt;

&lt;h2 id=&#34;development-plan&#34;&gt;Development Plan&lt;/h2&gt;

&lt;p&gt;On following diagram you can see common development phases of the project on a timeline (Vision and Analysis phases were left behind the scene).&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;../../assets/2017/03/app-development-schedule-v1.svg&#34; alt=&#34;Application Development Schedule&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s assume, we&amp;rsquo;re going to develop a web application consuming REST API from back-end server.&lt;/p&gt;

&lt;h3 id=&#34;1-ui-prototype&#34;&gt;1. UI Prototype&lt;/h3&gt;

&lt;p&gt;The actual development starts with web application prototyping.
First UI mockups are created and presented to Client.
This is typically an single page application (SPA) written using some component framework: Angular, React, whatever developers are confident with. If there is some visual prototype or screen mockups then initial version can be created quickly.&lt;/p&gt;

&lt;h3 id=&#34;2-add-some-static-data&#34;&gt;2. Add Some Static Data&lt;/h3&gt;

&lt;p&gt;When initial application structure is clear, it&amp;rsquo;s the time to add some data. This should not be a real data as there is no real backend to provide it. It&amp;rsquo;s enough to create some json files and deploy them under &lt;code&gt;/assets&lt;/code&gt; or &lt;code&gt;/data&lt;/code&gt; folder along with application.&lt;/p&gt;

&lt;h3 id=&#34;3-start-defining-api-contract&#34;&gt;3. Start Defining API Contract&lt;/h3&gt;

&lt;p&gt;This static data is a foundation of future API specification (contract). The most popular format for writing API specifications is &lt;a href=&#34;https://swagger.io&#34; target=&#34;_blank&#34;&gt;OpenAPI/Swagger&lt;/a&gt;. It suites well for most common cases. Some aspects, like inheritance, are not clear enough in specification but the format is widely accepted in the industry so it&amp;rsquo;s a default choice.&lt;/p&gt;

&lt;p&gt;Alternative formats for describing API are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://apiblueprint.org/&#34; target=&#34;_blank&#34;&gt;API Blueprint&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.mashape.com&#34; target=&#34;_blank&#34;&gt;Mashape&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/mashery/iodocs&#34; target=&#34;_blank&#34;&gt;Mashery I/O Docs&lt;/a&gt;&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When you have Specification, you can automatically generate and publish API reference documentation.
This will used often by your team internally and you will publish it later if you decide to make your API public.&lt;/p&gt;

&lt;p&gt;There are tools on the market you can use to generate HTML documentation from API Specification.&lt;/p&gt;

&lt;h3 id=&#34;4-a-time-for-testing&#34;&gt;4. A Time for Testing&lt;/h3&gt;

&lt;p&gt;Now you have web application fed with static data. It&amp;rsquo;s time to write some tests.
You may start testing some base functionality you&amp;rsquo;re confident with.
Web Developers may start testing web components using JS-stuff like mocha, jasmine or similar framework.&lt;/p&gt;

&lt;p&gt;It is impossible to cover all the cases without real application server. Also, it is very difficult to test requests sent by UI application. But you can test simple scenarios like: &lt;em&gt;&amp;laquo;WHEN user requests some url THEN expected data is shown on page&amp;raquo;.&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&#34;5-even-for-system-integration-testing&#34;&gt;5. â€¦Even for System Integration Testing&lt;/h3&gt;

&lt;p&gt;Webapp functional end-to-end testing with test data can be done by web developers.&lt;/p&gt;

&lt;p&gt;System integration testing is usually done by QA team and employs both web and back-end developers.
It usually covers complex interaction scenarios between front-end and back-end.&lt;/p&gt;

&lt;p&gt;Common tool used for system integration testing is &lt;a href=&#34;http://www.seleniumhq.org&#34; target=&#34;_blank&#34;&gt;Selenium&lt;/a&gt;.
Sometimes it is also necessary to develop some extra tools for direct access to underlaying data and external system emulators (test doubles).
And often the team will end up designing a custom test DSL to simplify writing this kind of tests&lt;/p&gt;

&lt;p&gt;There is a long way to go but even now it&amp;rsquo;s possible to star writing some simple tests&lt;/p&gt;

&lt;p&gt;And it is now possible to start creating System Integration tests.
Even you have no back-end yet, you defined an expected data in static files so there is nothing preventing from using a heavy stuff like Selenium.&lt;/p&gt;

&lt;h3 id=&#34;6-starting-back-end-mock-controllers&#34;&gt;6. Starting Back-End: Mock Controllers&lt;/h3&gt;

&lt;p&gt;We have a contract (API specification) and test data in static files (data should match the contract).
We have also some system integration tests.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s concentrate on deployment and testing. We don&amp;rsquo;t need to implement services and data layer so far.&lt;/p&gt;

&lt;p&gt;Now we need a back-end and full deployment cycle to test both front-end and back-end together.
From a API specification we may generate data transfer objects and interfaces of front controllers.
Then we should implement controllers so they return the same test data.
Mock controllers are enough. They may serve the same static data as for webapp.&lt;/p&gt;

&lt;p&gt;The most important that after completing this step our system integration tests should run against real UI working win real server. And tests should be green.&lt;/p&gt;

&lt;h3 id=&#34;7-continuing-back-end-controllers-and-mock-dao&#34;&gt;7. Continuing Back-End: Controllers and Mock DAO&lt;/h3&gt;

&lt;p&gt;Now it&amp;rsquo;s time to implement services, one by one. Database is still not necessary - we may mock persistence (DAO) layer.
The tests still should be green and we may add more tests now since we have Services now.&lt;/p&gt;

&lt;h3 id=&#34;8-continuing-back-end-real-database-and-dao&#34;&gt;8. Continuing Back-End: Real Database and DAO&lt;/h3&gt;

&lt;p&gt;Now we should design our persistence layer, create DAO add test data so the tests are still green.
After that we&amp;rsquo;ll have all components in our system:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Web Application&lt;/li&gt;
&lt;li&gt;REST API Specification&lt;/li&gt;
&lt;li&gt;Backend: Controllers, Services, DAO&lt;/li&gt;
&lt;li&gt;Database&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now let&amp;rsquo;s continue with short interactions affecting all system layers.&lt;/p&gt;

&lt;h2 id=&#34;final-notes&#34;&gt;Final Notes&lt;/h2&gt;

&lt;p&gt;This not a methodology. It&amp;rsquo;s just the idea of how to minimize unnecessary work in conditions of business uncertainty.&lt;/p&gt;

&lt;p&gt;You should not use this instruction blindly. Some steps may be omitted or combined for your project.&lt;/p&gt;

&lt;h2 id=&#34;links&#34;&gt;Links&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.slideshare.net/RichardPDoerer/what-isagile-henrik-kniberg-august-20-2013/21&#34; target=&#34;_blank&#34;&gt;&amp;laquo;What is Agile&amp;raquo; by Henrik Kniberg&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>How to Start Testing UI Before Backend is Ready</title>
      <link>https://konstantinpavlov.net/blog/2017/02/23/how-to-start-testing-ui-before-backend-is-ready/</link>
      <pubDate>Thu, 23 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://konstantinpavlov.net/blog/2017/02/23/how-to-start-testing-ui-before-backend-is-ready/</guid>
      <description>&lt;p&gt;Recently I was &lt;a href=&#34;http://disq.us/p/1gfbdpc&#34; target=&#34;_blank&#34;&gt;asked&lt;/a&gt; how to start with testing UI before backend is completed.&lt;/p&gt;

&lt;p&gt;It depends on the product a lot. But when we&amp;rsquo;re talking about web, it is often not clear how the final solution should look like and behave.
If so, it is not reasonable to spend much time writing UI tests using tools like &lt;a href=&#34;www.seleniumhq.org&#34; target=&#34;_blank&#34;&gt;Selenium&lt;/a&gt; before the first prototype is ready. It is not reasonable to write a presentation layer and, in some cases, a business logic on server side before it is clear what kind of data is required for UI.
To deal with it I suggest starting with UI mockups and use fake data to start prototyping. It is very easy if you&amp;rsquo;re writing single page application (SPA): just put some JSON files as static resources and read this files in applications. For more complex cases like handling &lt;code&gt;POST&lt;/code&gt; requests you may use simple mock server like &lt;a href=&#34;https://www.npmjs.com/package/gulp-connect&#34; target=&#34;_blank&#34;&gt;gulp-connect&lt;/a&gt;. This is required for development so your UI developers don&amp;rsquo;t even need any server running.&lt;/p&gt;

&lt;p&gt;Once you&amp;rsquo;re a bit confident how your UI will look like and behave, it comes the time to cover it with some tests.
When using Selenium you will normally ends up with developing some DSL framework for your tests which will include some custom assertions and methods to execute common tasks like user login and filing some forms. Now you should prepare more test data and put it in the same JSON files. Most likely, you will need fake server like gulp-connect in this stage.
Use &lt;a href=&#34;http://selenide.org/documentation/page-objects.html&#34; target=&#34;_blank&#34;&gt;PageObjects&lt;/a&gt; to abstract your tests from minor (or even major) future changes in the UI.&lt;/p&gt;

&lt;p&gt;It is impossible to cover all the cases without real application server. Also, it is very difficult to test requests sent by UI application. But you can test a lot of cases like &lt;em&gt;&amp;laquo;WHEN user requests some url THEN expected data is shown on page&amp;raquo;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;You may start developing your server in parallel with UI when your contract is defined.
That&amp;rsquo;s why I favor Contract-First approach over &amp;laquo;Contract-Last&amp;raquo;. Over time, the contract will mutate for sure. But this should be not a dramatical changes.&lt;/p&gt;

&lt;p&gt;The reason to start with UI is to define a contract from real UI requirements.
Initial prototype may be turned down by the clients so writing server-side logic is pointless.&lt;/p&gt;

&lt;p&gt;When server is ready to serve some data to the client, you may start the integration. Create a test data in your database which produces the same data as your JSON files served by mock server. And you should parametric your UI application to get data either from mock server or from real server.
I&amp;rsquo;m sure there will be issues. But I hope, you&amp;rsquo;ll get less issues since your UI is much more stable now. Happy integration! ;-)&lt;/p&gt;

&lt;p&gt;There is another case: you develop not a SPA but a site with many server-generated pages. The idea is the same:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Separate presentation from business logic&lt;/li&gt;
&lt;li&gt;Provide mock data for your pages&lt;/li&gt;
&lt;li&gt;Create a prototype using mock data&lt;/li&gt;
&lt;li&gt;Test your prototype with mock data&lt;/li&gt;
&lt;li&gt;When you&amp;rsquo;re confident and happy with the UI design and behavior &amp;ndash; then replace your fake DAO with real one and put test data to database. The same tests should still pass.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I hope this could help.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Selenium Tests with Maven and Selenide</title>
      <link>https://konstantinpavlov.net/blog/2016/05/12/selenium-tests-with-maven-and-selenide/</link>
      <pubDate>Thu, 12 May 2016 16:26:25 +0000</pubDate>
      
      <guid>https://konstantinpavlov.net/blog/2016/05/12/selenium-tests-with-maven-and-selenide/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://selenide.org&#34; target=&#34;_blank&#34;&gt;Selenide&lt;/a&gt; is nice wrapper around selenium web driver allowing to simplify writting UI tests with Selenium.&lt;/p&gt;

&lt;p&gt;Some of the cook features are:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;jquery-like selector syntax, e.g. &lt;code&gt;$(&amp;quot;div.myclass&amp;quot;).is(Condition.visible)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Automatic screenshots on assertion failure&lt;/li&gt;
&lt;li&gt;Easy starting Selenium WebDriver&lt;/li&gt;
&lt;li&gt;And &lt;a href=&#34;http://selenide.org/quick-start.html&#34; target=&#34;_blank&#34;&gt;others&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;So, let&amp;rsquo;s write some tests on selenide and make it run from maven in a normal browser or in headless mode.&lt;/p&gt;

&lt;p&gt;First, let&amp;rsquo;s create &lt;a href=&#34;https://raw.githubusercontent.com/kpavlov/selenide-maven-sample/master/pom.xml&#34; target=&#34;_blank&#34;&gt;&lt;em&gt;pom.xml&lt;/em&gt;&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt;
&amp;lt;project xmlns=&amp;quot;http://maven.apache.org/POM/4.0.0&amp;quot;
         xmlns:xsi=&amp;quot;http://www.w3.org/2001/XMLSchema-instance&amp;quot;
         xsi:schemaLocation=&amp;quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&amp;quot;&amp;gt;
    &amp;lt;modelVersion&amp;gt;4.0.0&amp;lt;/modelVersion&amp;gt;

    &amp;lt;groupId&amp;gt;com.github.kpavlov&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;selenide-sample&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;1.0-SNAPSHOT&amp;lt;/version&amp;gt;

    &amp;lt;properties&amp;gt;
        &amp;lt;java.version&amp;gt;1.8&amp;lt;/java.version&amp;gt;
        &amp;lt;maven.compiler.source&amp;gt;${java.version}&amp;lt;/maven.compiler.source&amp;gt;
        &amp;lt;maven.compiler.target&amp;gt;${java.version}&amp;lt;/maven.compiler.target&amp;gt;
        &amp;lt;selenium.hub.url&amp;gt;http://local.example.com:4444/wd/hub&amp;lt;/selenium.hub.url&amp;gt;
        &amp;lt;holdBrowserOpen&amp;gt;false&amp;lt;/holdBrowserOpen&amp;gt;
        &amp;lt;surefire.argLine&amp;gt;-Dbrowser=${browser} -Dselenide.holdBrowserOpen=${holdBrowserOpen}&amp;lt;/surefire.argLine&amp;gt;
    &amp;lt;/properties&amp;gt;

    &amp;lt;prerequisites&amp;gt;
        &amp;lt;maven&amp;gt;3.3&amp;lt;/maven&amp;gt;
    &amp;lt;/prerequisites&amp;gt;

    &amp;lt;profiles&amp;gt;
        &amp;lt;profile&amp;gt;
            &amp;lt;id&amp;gt;firefox&amp;lt;/id&amp;gt;
            &amp;lt;activation&amp;gt;
                &amp;lt;activeByDefault&amp;gt;true&amp;lt;/activeByDefault&amp;gt;
            &amp;lt;/activation&amp;gt;
            &amp;lt;properties&amp;gt;
                &amp;lt;browser&amp;gt;firefox&amp;lt;/browser&amp;gt;
            &amp;lt;/properties&amp;gt;
        &amp;lt;/profile&amp;gt;
        &amp;lt;profile&amp;gt;
            &amp;lt;id&amp;gt;chrome&amp;lt;/id&amp;gt;
            &amp;lt;properties&amp;gt;
                &amp;lt;browser&amp;gt;chrome&amp;lt;/browser&amp;gt;
            &amp;lt;/properties&amp;gt;
        &amp;lt;/profile&amp;gt;
        &amp;lt;profile&amp;gt;
            &amp;lt;id&amp;gt;phantomjs&amp;lt;/id&amp;gt;
            &amp;lt;properties&amp;gt;
                &amp;lt;browser&amp;gt;phantomjs&amp;lt;/browser&amp;gt;
            &amp;lt;/properties&amp;gt;
        &amp;lt;/profile&amp;gt;
        &amp;lt;profile&amp;gt;
            &amp;lt;id&amp;gt;ie&amp;lt;/id&amp;gt;
            &amp;lt;properties&amp;gt;
                &amp;lt;browser&amp;gt;ie&amp;lt;/browser&amp;gt;
            &amp;lt;/properties&amp;gt;
        &amp;lt;/profile&amp;gt;
        &amp;lt;profile&amp;gt;
            &amp;lt;id&amp;gt;htmlunit&amp;lt;/id&amp;gt;
            &amp;lt;properties&amp;gt;
                &amp;lt;browser&amp;gt;htmlunit&amp;lt;/browser&amp;gt;
            &amp;lt;/properties&amp;gt;
            &amp;lt;dependencies&amp;gt;
                &amp;lt;dependency&amp;gt;
                    &amp;lt;groupId&amp;gt;org.seleniumhq.selenium&amp;lt;/groupId&amp;gt;
                    &amp;lt;artifactId&amp;gt;selenium-htmlunit-driver&amp;lt;/artifactId&amp;gt;
                    &amp;lt;version&amp;gt;LATEST&amp;lt;/version&amp;gt;
                    &amp;lt;scope&amp;gt;test&amp;lt;/scope&amp;gt;
                &amp;lt;/dependency&amp;gt;
            &amp;lt;/dependencies&amp;gt;
        &amp;lt;/profile&amp;gt;
        &amp;lt;profile&amp;gt;
            &amp;lt;id&amp;gt;ci-server&amp;lt;/id&amp;gt;
            &amp;lt;properties&amp;gt;
                &amp;lt;surefire.argLine&amp;gt;-Dremote=${selenium.hub.url} -Dbrowser=${browser}&amp;lt;/surefire.argLine&amp;gt;
            &amp;lt;/properties&amp;gt;
        &amp;lt;/profile&amp;gt;
        &amp;lt;profile&amp;gt;
            &amp;lt;id&amp;gt;local&amp;lt;/id&amp;gt;
            &amp;lt;properties&amp;gt;
                &amp;lt;holdBrowserOpen&amp;gt;true&amp;lt;/holdBrowserOpen&amp;gt;
            &amp;lt;/properties&amp;gt;
        &amp;lt;/profile&amp;gt;
    &amp;lt;/profiles&amp;gt;

    &amp;lt;build&amp;gt;
        &amp;lt;defaultGoal&amp;gt;clean test&amp;lt;/defaultGoal&amp;gt;
        &amp;lt;plugins&amp;gt;
            &amp;lt;plugin&amp;gt;
                &amp;lt;groupId&amp;gt;org.apache.maven.plugins&amp;lt;/groupId&amp;gt;
                &amp;lt;artifactId&amp;gt;maven-surefire-plugin&amp;lt;/artifactId&amp;gt;
                &amp;lt;version&amp;gt;2.19.1&amp;lt;/version&amp;gt;
                &amp;lt;configuration&amp;gt;
                    &amp;lt;argLine&amp;gt;${surefire.argLine}&amp;lt;/argLine&amp;gt;
                &amp;lt;/configuration&amp;gt;
            &amp;lt;/plugin&amp;gt;
        &amp;lt;/plugins&amp;gt;
        &amp;lt;pluginManagement&amp;gt;
            &amp;lt;plugins&amp;gt;
                &amp;lt;plugin&amp;gt;
                    &amp;lt;groupId&amp;gt;org.apache.maven.plugins&amp;lt;/groupId&amp;gt;
                    &amp;lt;artifactId&amp;gt;maven-surefire-plugin&amp;lt;/artifactId&amp;gt;
                &amp;lt;/plugin&amp;gt;
            &amp;lt;/plugins&amp;gt;
        &amp;lt;/pluginManagement&amp;gt;
    &amp;lt;/build&amp;gt;

    &amp;lt;dependencies&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;org.slf4j&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;slf4j-simple&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;1.7.13&amp;lt;/version&amp;gt;
            &amp;lt;scope&amp;gt;test&amp;lt;/scope&amp;gt;
        &amp;lt;/dependency&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;com.codeborne&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;selenide&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;3.5.1&amp;lt;/version&amp;gt;
            &amp;lt;scope&amp;gt;test&amp;lt;/scope&amp;gt;
        &amp;lt;/dependency&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;junit&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;junit&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;4.12&amp;lt;/version&amp;gt;
            &amp;lt;scope&amp;gt;test&amp;lt;/scope&amp;gt;
        &amp;lt;/dependency&amp;gt;
    &amp;lt;/dependencies&amp;gt;
&amp;lt;/project&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Notice the properties:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;surefire.argLine&lt;/strong&gt; &amp;ndash; defines a command line parameters for running tests.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;browser&lt;/strong&gt; &amp;ndash; specifies a browser to use.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;selenium.hub.url&lt;/strong&gt; &amp;ndash; URL where selenium hub is running, for tests with remote web driver, e.g. on CI server.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;holdBrowserOpen&lt;/strong&gt; &amp;ndash; should the browser be closed after tests.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Also there are a fistful of profiles to use as a shortcuts, e.g.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;mvn clean test -Pphantomjs&lt;/code&gt; &amp;ndash; run tests locally with phantomjs headless browser. Requires phantomjs to be installed&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mvn clean test -Pfirefox,local&lt;/code&gt; &amp;ndash; run tests locally with Firefox and leaves a browser open after tests&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mvn clean test -Pci-server,chrome&lt;/code&gt; &amp;ndash; run tests on selenium hub with Chrome&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You may find working example in my &lt;a href=&#34;https://github.com/kpavlov/selenide-maven-sample&#34; target=&#34;_blank&#34;&gt;GitHub repository&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Recalling Testing Principles</title>
      <link>https://konstantinpavlov.net/blog/2015/01/28/recalling-testing-principles/</link>
      <pubDate>Wed, 28 Jan 2015 23:04:54 +0000</pubDate>
      
      <guid>https://konstantinpavlov.net/blog/2015/01/28/recalling-testing-principles/</guid>
      <description>&lt;p&gt;If you are involved in software development then recalling a basic testing principles once again is not a waste of time. So here are the principles:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;A necessary part of a test case is a definition of the expected output or result.&lt;/li&gt;
&lt;li&gt;A programmer should avoid attempting to test his or her own program.&lt;/li&gt;
&lt;li&gt;A programming organization should not test its own programs.&lt;/li&gt;
&lt;li&gt;Any testing process should include a thorough inspection of the results of each test.&lt;/li&gt;
&lt;li&gt;Test cases must be written for input conditions that are invalid and unexpected, as well as for those that are valid and expected.&lt;/li&gt;
&lt;li&gt;Examining a program to see if it does not do what it is supposed to do is only half the battle; the other half is seeing whether the program does what it is not supposed to do.&lt;/li&gt;
&lt;li&gt;Avoid throwaway test cases unless the program is truly a throwaway program.&lt;/li&gt;
&lt;li&gt;Do not plan a testing effort under the tacit assumption that no errors will be found.&lt;/li&gt;
&lt;li&gt;The probability of the existence of more errors in a section of a program is proportional to the number of errors already found in that section.&lt;/li&gt;
&lt;li&gt;Testing is an extremely creative and intellectually challenging task.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I recommend reading a book &lt;a href=&#34;http://eu.wiley.com/WileyCDA/WileyTitle/productCd-1118031962.html&#34; title=&#34;The Art of Software Testing, 3rd Edition&#34; target=&#34;_blank&#34;&gt;&amp;laquo;The Art of Software Testing&amp;raquo;&lt;/a&gt; by Glenford j. Myers, Tom Badgett and Corey Sandler (ISBN: 978-1-118-03196-4).&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>