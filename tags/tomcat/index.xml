<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tomcat on The Culture of Code</title>
    <link>https://konstantinpavlov.net/tags/tomcat/index.xml</link>
    <description>Recent content in Tomcat on The Culture of Code</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="https://konstantinpavlov.net/tags/tomcat/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Booting Spring Webapp</title>
      <link>https://konstantinpavlov.net/blog/2015/02/19/booting-spring-webapp/</link>
      <pubDate>Thu, 19 Feb 2015 23:39:35 +0000</pubDate>
      
      <guid>https://konstantinpavlov.net/blog/2015/02/19/booting-spring-webapp/</guid>
      <description>&lt;p&gt;Spring Boot is an excellent tool to bootstrap java application.
Most of the references mention how to create a standalone java application, optionally with embedded web server (tomcat or jetty). But &lt;a href=&#34;http://projects.spring.io/spring-boot/&#34; title=&#34;Spring Boot Project&#34; target=&#34;_blank&#34;&gt;Spring Boot&lt;/a&gt; supports also creating web applications intended to run within servlet container.

Here is example of maven &lt;em&gt;pom.xml&lt;/em&gt; file for Spring-Boot-enabled web application:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;    ...
    &amp;lt;packaging&amp;gt;war&amp;lt;/packaging&amp;gt;
    &amp;lt;properties&amp;gt;
        &amp;lt;!-- If web.xml is not used --&amp;gt;
        &amp;lt;failOnMissingWebXml&amp;gt;false&amp;lt;/failOnMissingWebXml&amp;gt;
        &amp;lt;!-- Set Spring-Boot Version --&amp;gt;
        &amp;lt;spring-boot.version&amp;gt;1.2.1.RELEASE&amp;lt;/spring-boot.version&amp;gt;
    &amp;lt;/properties&amp;gt;
    &amp;lt;dependencyManagement&amp;gt;
        &amp;lt;dependencies&amp;gt;
            &amp;lt;dependency&amp;gt;
                &amp;lt;!-- Import dependency management from Spring Boot --&amp;gt;
                &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
                &amp;lt;artifactId&amp;gt;spring-boot-dependencies&amp;lt;/artifactId&amp;gt;
                &amp;lt;version&amp;gt;${spring-boot.version}&amp;lt;/version&amp;gt;
                &amp;lt;type&amp;gt;pom&amp;lt;/type&amp;gt;
                &amp;lt;scope&amp;gt;import&amp;lt;/scope&amp;gt;
            &amp;lt;/dependency&amp;gt;
        &amp;lt;/dependencies&amp;gt;
    &amp;lt;/dependencyManagement&amp;gt;
    &amp;lt;dependencies&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;spring-boot-starter-web&amp;lt;/artifactId&amp;gt;
            &amp;lt;exclusions&amp;gt;
                &amp;lt;exclusion&amp;gt;
                    &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
                    &amp;lt;artifactId&amp;gt;spring-boot-starter-tomcat&amp;lt;/artifactId&amp;gt;
                &amp;lt;/exclusion&amp;gt;
            &amp;lt;/exclusions&amp;gt;
        &amp;lt;/dependency&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;!-- Provided in Tomcat --&amp;gt;
            &amp;lt;groupId&amp;gt;javax.servlet&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;javax.servlet-api&amp;lt;/artifactId&amp;gt;
            &amp;lt;scope&amp;gt;provided&amp;lt;/scope&amp;gt;
        &amp;lt;/dependency&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;!-- Provided in Tomcat --&amp;gt;
            &amp;lt;groupId&amp;gt;javax.el&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;javax.el-api&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;2.2.4&amp;lt;/version&amp;gt;
            &amp;lt;scope&amp;gt;provided&amp;lt;/scope&amp;gt;
        &amp;lt;/dependency&amp;gt;
        &amp;lt;!-- Test dependencies --&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;spring-boot-starter-test&amp;lt;/artifactId&amp;gt;
            &amp;lt;scope&amp;gt;test&amp;lt;/scope&amp;gt;
        &amp;lt;/dependency&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;org.glassfish.web&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;javax.el&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;2.2.4&amp;lt;/version&amp;gt;
            &amp;lt;scope&amp;gt;test&amp;lt;/scope&amp;gt;
        &amp;lt;/dependency&amp;gt;        
    &amp;lt;/dependencies&amp;gt;
    ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You&amp;rsquo;ll need a &lt;code&gt;SpringBootServletInitializer&lt;/code&gt; to configure web application:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;@Configuration
@ComponentScan
@EnableAutoConfiguration
public class Application extends SpringBootServletInitializer {

    private static Class&amp;lt;Application&amp;gt; applicationClass = Application.class;

    public static void main(String... args) {
        SpringApplication.run(applicationClass, args);
    }

    @Override
    protected SpringApplicationBuilder configure(SpringApplicationBuilder application) {
        return application.sources(applicationClass);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;HUGOMORE42&lt;/p&gt;

&lt;h2 id=&#34;tuning-configuration&#34;&gt;Tuning Configuration&lt;/h2&gt;

&lt;p&gt;If you want to have a configuration file hierarchy, e.g.:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Default properties (from classpath)&lt;/li&gt;
&lt;li&gt;Environment-specific server properties (from &lt;code&gt;$CATALINA_BASE/conf&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Environment-specific application properties (from &lt;code&gt;$CATALINA_BASE/conf&lt;/code&gt;)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;You may specify &lt;code&gt;spring.config.location&lt;/code&gt; env-entries in &lt;code&gt;web.xml&lt;/code&gt;. Spring Boot will read properties from JNDI.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt;
&amp;lt;web-app xmlns:xsi=&amp;quot;http://www.w3.org/2001/XMLSchema-instance&amp;quot; xmlns=&amp;quot;http://java.sun.com/xml/ns/javaee&amp;quot;
         xsi:schemaLocation=&amp;quot;http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd&amp;quot;
         version=&amp;quot;3.0&amp;quot;&amp;gt;
    &amp;lt;display-na&amp;gt;
    &amp;lt;env-entry&amp;gt;
        &amp;lt;env-entry-name&amp;gt;spring.config.location&amp;lt;/env-entry-name&amp;gt;
        &amp;lt;env-entry-type&amp;gt;java.lang.String&amp;lt;/env-entry-type&amp;gt;
        &amp;lt;env-entry-value&amp;gt;
            classpath:/default.properties,
            file:${catalina.base}/conf/common.properties,
            file:${catalina.base}/conf/my-application.properties
        &amp;lt;/env-entry-value&amp;gt;
    &amp;lt;/env-entry&amp;gt;
&amp;lt;/web-app&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;references&#34;&gt;References&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://spring.io/blog/2014/03/07/deploying-spring-boot-applications#what-about-the-java-ee-application-server&#34; title=&#34;Deploying Spring Boot Applications: What about the Java EE Application Server?&#34; target=&#34;_blank&#34;&gt;Deploying Spring Boot Applications: What about the Java EE Application Server?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://docs.spring.io/spring-boot/docs/current/reference/html/common-application-properties.html&#34; title=&#34;Spring Boot: Common application properties&#34; target=&#34;_blank&#34;&gt;Spring Boot application properties&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Jolokia: HTTP/JSON bridge for JMX</title>
      <link>https://konstantinpavlov.net/blog/2014/06/09/jolokia-http/json-bridge-for-jmx/</link>
      <pubDate>Mon, 09 Jun 2014 13:17:37 +0300</pubDate>
      
      <guid>https://konstantinpavlov.net/blog/2014/06/09/jolokia-http/json-bridge-for-jmx/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://upload.wikimedia.org/wikipedia/commons/thumb/6/69/BhutJolokia09_Asit.jpg/640px-BhutJolokia09_Asit.jpg&#34; alt=&#34;Jolokia Logo&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Very often there is a need to monitor the Java application server.
For example, external monitoring tool, like Nagious/Zenoss/Zabbix needs to get some metrics, like heap memory usage or thread count.&lt;/p&gt;

&lt;p&gt;Usual way to get that metrics is to setup access to application server via JMX.&lt;/p&gt;

&lt;p&gt;But, sometimes, it is not possible to leave some other port opened for JMX and the only port available is HTTP(80 or 8080) or HTTPS(443 or 8443).&lt;/p&gt;

&lt;p&gt;Here the &lt;a href=&#34;http://www.jolokia.org&#34; title=&#34;Jolokia Project&#34; target=&#34;_blank&#34;&gt;Jolokia&lt;/a&gt; comes to rescue!
&lt;/p&gt;

&lt;p&gt;Jolokia is a HTTP/JSON bridge for JMX server. It can be deployed as web archive (.war) to servlet container and expose MBeans via HTTP.&lt;/p&gt;

&lt;p&gt;Also, it is quite lightweight - only 285K for webarchive.&lt;/p&gt;

&lt;h2 id=&#34;configuration&#34;&gt;Configuration&lt;/h2&gt;

&lt;p&gt;Here is a small instruction how to get an access to JMX beans in &lt;a href=&#34;../../tags/tomcat&#34;&gt;Tomcat&lt;/a&gt; via &lt;a href=&#34;http://www.jolokia.org&#34; title=&#34;Jolokia Project&#34; target=&#34;_blank&#34;&gt;Jolokia&lt;/a&gt;.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;http://www.jolokia.org/download.html&#34; target=&#34;_blank&#34;&gt;Download&lt;/a&gt; &lt;code&gt;jolockia.war&lt;/code&gt; and deploy it to servlet container.&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Run in command line:
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;$ curl localhost:8080/jolokia/read/java.lang:type&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;Memory/HeapMemoryUsage
&lt;span style=&#34;color: #f92672&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;request&amp;quot;&lt;/span&gt;:&lt;span style=&#34;color: #f92672&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;mbean&amp;quot;&lt;/span&gt;:&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;java.lang:type=Memory&amp;quot;&lt;/span&gt;,&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;attribute&amp;quot;&lt;/span&gt;:&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;HeapMemoryUsage&amp;quot;&lt;/span&gt;,&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;type&amp;quot;&lt;/span&gt;:&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;read&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;}&lt;/span&gt;,&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;value&amp;quot;&lt;/span&gt;:&lt;span style=&#34;color: #f92672&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;init&amp;quot;&lt;/span&gt;:536870912,&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;committed&amp;quot;&lt;/span&gt;:514850816,&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;max&amp;quot;&lt;/span&gt;:514850816,&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;used&amp;quot;&lt;/span&gt;:132049768&lt;span style=&#34;color: #f92672&#34;&gt;}&lt;/span&gt;,&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;timestamp&amp;quot;&lt;/span&gt;:1402310991,&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;status&amp;quot;&lt;/span&gt;:200&lt;span style=&#34;color: #f92672&#34;&gt;}&lt;/span&gt;
$ curl localhost:8080/jolokia/read/java.lang:type&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;Memory/HeapMemoryUsage/used
&lt;span style=&#34;color: #f92672&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;request&amp;quot;&lt;/span&gt;:&lt;span style=&#34;color: #f92672&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;path&amp;quot;&lt;/span&gt;:&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;used&amp;quot;&lt;/span&gt;,&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;mbean&amp;quot;&lt;/span&gt;:&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;java.lang:type=Memory&amp;quot;&lt;/span&gt;,&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;attribute&amp;quot;&lt;/span&gt;:&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;HeapMemoryUsage&amp;quot;&lt;/span&gt;,&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;type&amp;quot;&lt;/span&gt;:&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;read&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;}&lt;/span&gt;,&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;value&amp;quot;&lt;/span&gt;:132049736,&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;timestamp&amp;quot;&lt;/span&gt;:1402310735,&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;status&amp;quot;&lt;/span&gt;:200&lt;span style=&#34;color: #f92672&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

You may also use your browser to see JSON response. I suggest installing &lt;a href=&#34;https://chrome.google.com/webstore/detail/json-formatter/bcjindcccaagfpapjjmafapmmgkkhgoa&#34; title=&#34;JSON Formatter Chrome Extension&#34; target=&#34;_blank&#34;&gt;JSON Fromamter&lt;/a&gt; for better view. &lt;img src=&#34;../../assets/2014/06/jolokia-heap.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Now you can configure your monitoring software to ping server periodically and parse &amp;laquo;value&amp;raquo; attribute from JSON response.&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Released version of Jolokia are available in &lt;a href=&#34;https://search.maven.org/#search%7Cga%7C1%7Cg%3A%22org.jolokia%22&#34; target=&#34;_blank&#34;&gt;central maven repository&lt;/a&gt;:
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
	&lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.jolokia&lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
	&lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;jolokia-war&lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
	&lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;1.2.1&lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Also, Jolokia provides OSGi, Mule and JVM &lt;a href=&#34;http://www.jolokia.org/reference/html/agents.html&#34; target=&#34;_blank&#34;&gt;agents&lt;/a&gt; as well as Webarchive (War) agent.&lt;/p&gt;

&lt;h2 id=&#34;links&#34;&gt;Links&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.jolokia.org&#34; title=&#34;Jolokia Project&#34; target=&#34;_blank&#34;&gt;Jolokia Project Home&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/rhuss/jolokia&#34; title=&#34;Jolokia on GitHub&#34; target=&#34;_blank&#34;&gt;Jolokia Project on GitHub&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Webapp Inter-Communication in Tomcat</title>
      <link>https://konstantinpavlov.net/blog/2014/05/09/webapp-inter-communication-in-tomcat/</link>
      <pubDate>Fri, 09 May 2014 22:40:12 +0300</pubDate>
      
      <guid>https://konstantinpavlov.net/blog/2014/05/09/webapp-inter-communication-in-tomcat/</guid>
      <description>&lt;p&gt;&lt;em&gt;Sometimes you need to access services deployed in one web application from another web application within same application server. For Tomcat there is not so many options to do it. In this article we&amp;rsquo;ll discuss you how to use JMX for communication between web applications.&lt;/em&gt;
&lt;/p&gt;

&lt;p&gt;When both web applications are deployed on the same &lt;a href=&#34;http://tomcat.apache.org&#34; title=&#34;Apache Tomcat&#34; target=&#34;_blank&#34;&gt;Tomcat server&lt;/a&gt; instance there are, at least, two options to communicate between them:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Create a JAX-WS or RESTful webservice in A.war and invoke it via http client from B.war&lt;/li&gt;
&lt;li&gt;Expose a service as managed bean in A.war and invoke it via JMX from B.war&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;There are at least two disadvantage of the first approach:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Your webservice becomes available to the public and there is a security risk unless you protect access to that service, if you care about this.&lt;/li&gt;
&lt;li&gt;Web service invocation is not free. Marshalling/unmarshalling is required.&lt;/li&gt;
&lt;li&gt;You&amp;rsquo;ll have to write a service endpoint class.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;But there is an advantage:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;You may choose deploy your service to different Tomcat. It will not require much work to reconfigure your services.&lt;/li&gt;
&lt;li&gt;You should not care about classloader issues.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Second solution uses existing server infrastructure. It also may cause a security risk if your JMX services are accessible by remote clients. But it is not often a case, or JMX is usually not as vulnerable as HTTP port.
Also, you may not warry about marshalling/unmarshalling or serialisation/deserializartion.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s discuss a third solution (JMX) in details.&lt;/p&gt;

&lt;h2 id=&#34;exposing-and-accessing-managed-beans-with-springframework&#34;&gt;Exposing and Accessing Managed Beans with SpringFramework&lt;/h2&gt;

&lt;p&gt;Tomcat has it&amp;rsquo;s own JMX Server and &lt;a href=&#34;http://springframework.org&#34; target=&#34;_blank&#34;&gt;SpringFramework&lt;/a&gt; has JMX exporter feature out of the box.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s start with simple example.
We&amp;rsquo;ll create first web application &lt;code&gt;service.war&lt;/code&gt; exposing &lt;a href=&#34;https://gist.github.com/kpavlov/3e19dcec52b56d550e21#file-api-jar-echoservice&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;EchoService&lt;/code&gt;&lt;/a&gt; via JMX.
Then we&amp;rsquo;ll access that service in a second web application &lt;code&gt;ui.war&lt;/code&gt; from within a servlet.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s create a maven project with 3 modules:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;modules&amp;gt;
    &amp;lt;module&amp;gt;api.jar&amp;lt;/module&amp;gt;
    &amp;lt;module&amp;gt;service.war&amp;lt;/module&amp;gt;
    &amp;lt;module&amp;gt;ui.war&amp;lt;/module&amp;gt;
&amp;lt;/modules&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;First module, &lt;em&gt;api.jar&lt;/em&gt;, will contain a service interface, &lt;code&gt;EchoService&lt;/code&gt; which is pretty simple
(here and later imports are omitted):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;public interface EchoService {

    public static final String MBEAN_NAME = &amp;quot;com.example:type=service,name=EchoService&amp;quot;;

    String echo(String input);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Second module, &lt;em&gt;service.war&lt;/em&gt;, will contain a &lt;a href=&#34;https://gist.github.com/kpavlov/3e19dcec52b56d550e21#file-service-war-echoserviceimpl&#34; target=&#34;_blank&#34;&gt;service implementation class&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;@ManagedResource(objectName = EchoService.MBEAN_NAME)
public class EchoServiceImpl implements EchoService {

    @Override
    @ManagedOperation
    public String echo(String input) {
        return &amp;quot;You said: &amp;quot; + input;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&amp;hellip; as well as Spring configuration file &lt;em&gt;services-context.xml&lt;/em&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt;
&amp;lt;beans xmlns=&amp;quot;http://www.springframework.org/schema/beans&amp;quot;
       xmlns:xsi=&amp;quot;http://www.w3.org/2001/XMLSchema-instance&amp;quot;
       xmlns:context=&amp;quot;http://www.springframework.org/schema/context&amp;quot;
       xsi:schemaLocation=&amp;quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd&amp;quot;&amp;gt;

    &amp;lt;context:annotation-config/&amp;gt;
    &amp;lt;context:mbean-export/&amp;gt;

    &amp;lt;bean id=&amp;quot;echoService&amp;quot; class=&amp;quot;com.example.service.EchoServiceImpl&amp;quot;/&amp;gt;

&amp;lt;/beans&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here the &lt;a href=&#34;http://docs.spring.io/spring/docs/3.2.x/spring-framework-reference/html/jmx.html&#34; target=&#34;_blank&#34;&gt;JMX export feature&lt;/a&gt;
of &lt;a href=&#34;http://springframework.org&#34; target=&#34;_blank&#34;&gt;SpringFramework&lt;/a&gt; is used.&lt;/p&gt;

&lt;p&gt;And a &lt;em&gt;web.xml&lt;/em&gt; descriptor is:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;web-app xmlns=&amp;quot;http://java.sun.com/xml/ns/javaee&amp;quot;
         xmlns:xsi=&amp;quot;http://www.w3.org/2001/XMLSchema-instance&amp;quot;
         xsi:schemaLocation=&amp;quot;http://java.sun.com/xml/ns/javaee
          http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd&amp;quot;
         version=&amp;quot;3.0&amp;quot;&amp;gt;

    &amp;lt;display-name&amp;gt;Servlet 3.0 Web Application&amp;lt;/display-name&amp;gt;

    &amp;lt;context-param&amp;gt;
        &amp;lt;param-name&amp;gt;contextConfigLocation&amp;lt;/param-name&amp;gt;
        &amp;lt;param-value&amp;gt;classpath:/services-context.xml&amp;lt;/param-value&amp;gt;
    &amp;lt;/context-param&amp;gt;

    &amp;lt;listener&amp;gt;
        &amp;lt;listener-class&amp;gt;org.springframework.web.context.ContextLoaderListener&amp;lt;/listener-class&amp;gt;
    &amp;lt;/listener&amp;gt;
&amp;lt;/web-app&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Third module, &lt;em&gt;ui.war&lt;/em&gt;, will contain a servlet, which will use the service:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;@WebServlet(urlPatterns = &amp;quot;/echo/*&amp;quot;)
public class EchoServlet extends HttpServlet {

    @Autowired
    private EchoService echoService;

    @Override
    public void init(ServletConfig config) throws ServletException {
        SpringBeanAutowiringSupport.processInjectionBasedOnServletContext(this,
                config.getServletContext());
        System.out.println(&amp;quot;Servlet initialized&amp;quot;);
    }

    @Override
    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {

        final String input = req.getPathInfo();

        final String output = echoService.echo(input);

        resp.setBufferSize(1024);
        resp.setStatus(HttpServletResponse.SC_OK);
        resp.setContentType(&amp;quot;text/plain&amp;quot;);
        resp.setCharacterEncoding(&amp;quot;UTF-8&amp;quot;);
        resp.getWriter().write(output);
        resp.getWriter().close();
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;spring context configuration &lt;em&gt;web-context.xml&lt;/em&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;    &amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt;
    &amp;lt;beans xmlns=&amp;quot;http://www.springframework.org/schema/beans&amp;quot;
           xmlns:xsi=&amp;quot;http://www.w3.org/2001/XMLSchema-instance&amp;quot;
           xmlns:util=&amp;quot;http://www.springframework.org/schema/util&amp;quot;
           xsi:schemaLocation=&amp;quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd   http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd&amp;quot;&amp;gt;

        &amp;lt;bean id=&amp;quot;echoService&amp;quot; class=&amp;quot;org.springframework.jmx.access.MBeanProxyFactoryBean&amp;quot; lazy-init=&amp;quot;true&amp;quot;&amp;gt;
            &amp;lt;property name=&amp;quot;objectName&amp;quot;&amp;gt;
                &amp;lt;util:constant static-field=&amp;quot;com.example.service.EchoService.MBEAN_NAME&amp;quot;/&amp;gt;
            &amp;lt;/property&amp;gt;
            &amp;lt;property name=&amp;quot;proxyInterface&amp;quot; value=&amp;quot;com.example.service.EchoService&amp;quot;/&amp;gt;
        &amp;lt;/bean&amp;gt;

    &amp;lt;/beans&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;web.xml&lt;/em&gt; descriptor:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;    &amp;lt;web-app xmlns=&amp;quot;http://java.sun.com/xml/ns/javaee&amp;quot;
             xmlns:xsi=&amp;quot;http://www.w3.org/2001/XMLSchema-instance&amp;quot;
             xsi:schemaLocation=&amp;quot;http://java.sun.com/xml/ns/javaee
              http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd&amp;quot;
             version=&amp;quot;3.0&amp;quot;&amp;gt;

        &amp;lt;display-name&amp;gt;Servlet 3.0 Web Application&amp;lt;/display-name&amp;gt;

        &amp;lt;context-param&amp;gt;
            &amp;lt;param-name&amp;gt;contextConfigLocation&amp;lt;/param-name&amp;gt;
            &amp;lt;param-value&amp;gt;WEB-INF/web-context.xml&amp;lt;/param-value&amp;gt;
        &amp;lt;/context-param&amp;gt;

        &amp;lt;listener&amp;gt;
            &amp;lt;listener-class&amp;gt;org.springframework.web.context.ContextLoaderListener&amp;lt;/listener-class&amp;gt;
        &amp;lt;/listener&amp;gt;
    &amp;lt;/web-app&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When those two webapps are deployed to tomcat, a new JMX bean is created:
&lt;img src=&#34;../../assets/2014/05/tomcat-mbean-service.png&#34; alt=&#34;EchoService exposed as Managed Bean&#34; /&gt;&lt;/p&gt;

&lt;p&gt;and service is accessible from the servlet:
&lt;img src=&#34;../../assets/2014/05/tomcat-service-invoked.png&#34; alt=&#34;EchoServlet showing results of EchoService invocation&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;module-dependencies&#34;&gt;Module dependencies&lt;/h3&gt;

&lt;p&gt;All web modules should depend on &lt;em&gt;api.jar&lt;/em&gt; module, because it contains a service interface.&lt;/p&gt;

&lt;p&gt;While your service method signatures contains only standard java classes, available across the Tomcat server,
you may not care about classloading issues. In this case both &lt;em&gt;service.war&lt;/em&gt; and &lt;em&gt;ui.war&lt;/em&gt; should contain &lt;em&gt;api.jar&lt;/em&gt; as a dependency in their &lt;code&gt;WEB-INF/lib&lt;/code&gt; directory.&lt;/p&gt;

&lt;p&gt;But if you want to return from your service method some custom class,
you&amp;rsquo;ll need to put that class to &lt;em&gt;api.jar&lt;/em&gt; and place that JAR to &lt;code&gt;${catalina.base}/lib&lt;/code&gt; folder to make that classes available to all web applications. In this case &lt;em&gt;api.jar&lt;/em&gt; should be declared as &lt;em&gt;provided&lt;/em&gt; dependency in webapp modules.&lt;/p&gt;

&lt;p&gt;Having sharing classes in a common classloader eliminates the need of data serialization/deserialization.&lt;/p&gt;

&lt;p&gt;Sources from this article you may find &lt;a href=&#34;https://gist.github.com/kpavlov/3e19dcec52b56d550e21&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Establishing Customizable Tomcat Configuration</title>
      <link>https://konstantinpavlov.net/blog/2014/03/22/establishing-customizable-tomcat-configuration/</link>
      <pubDate>Sat, 22 Mar 2014 12:40:16 +0300</pubDate>
      
      <guid>https://konstantinpavlov.net/blog/2014/03/22/establishing-customizable-tomcat-configuration/</guid>
      <description>&lt;p&gt;Deploying to &lt;a href=&#34;http://tomcat.apache.org&#34; target=&#34;_blank&#34;&gt;Apache Tomcat&lt;/a&gt; often requires making changes to default configuration.
These changes are often environment specific.
Also, when upgrading a Tomcat to new version you need to be sure that all your custom changes have not been lost and were applied to new configuration.
To deal with all that stuff Tomcat via separation of the configuration.
This post contains step-by-step instruction will help you to establish custom tomcat configuration.
&lt;/p&gt;

&lt;h2 id=&#34;1-installing-tomcat&#34;&gt;1. Installing tomcat&lt;/h2&gt;

&lt;p&gt;You download Tomcat distribution binary and extract it to some folder.
I put it to &lt;code&gt;~/java/apache-tomcat-7.0.52&lt;/code&gt;.
It is desirable to create a symlink to it. It would allow to switch to another version of tomcat without changing your scripts&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;ln -s ~/java/apache-tomcat-7.0.52 ~/java/tomcat
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As alternative, you may install a tomcat from packages.&lt;/p&gt;

&lt;h2 id=&#34;2-create-a-folder-to-keep-your-custom-configuration&#34;&gt;2. Create a folder to keep your custom configuration&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Create a folder where you custom configuration will be located.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mkdir -p ~/java/custom-tomcat/{bin,conf,logs,work,webapps,temp}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Copy default &lt;code&gt;server.xml&lt;/code&gt;, &lt;code&gt;tomcat-users.xml&lt;/code&gt; configuration file to custom location. If you already have a customized &lt;code&gt;server.xml&lt;/code&gt; then put it there&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cp -v ~/java/tomcat/conf/server.xml ~/java/tomcat/conf/tomcat-users.xml ~/java/custom-tomcat/conf/[](null)
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Set system property &lt;code&gt;$CATALINA_BASE&lt;/code&gt; referring to base directory for resolving dynamic portions of a Catalina installation.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;export CATALINA_BASE=~/java/custom-tomcat
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now you can start the Tomcat and see that it uses your custom configuration folder:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ./catalina.sh run
Using CATALINA_BASE:   /Users/maestro/java/custom-tomcat
Using CATALINA_HOME:   /Users/maestro/java/tomcat
Using CATALINA_TMPDIR: /Users/maestro/java/custom-tomcat/temp
...
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;3-tomcat-runtime-parameters-customization&#34;&gt;3. Tomcat runtime parameters customization&lt;/h2&gt;

&lt;p&gt;To specify JVM options to be used when tomcat server is run, create a bash script &lt;code&gt;$CATALINA_BASE/bin/setenv.sh&lt;/code&gt;. It will keep environment variables referred in &lt;code&gt;catalina.sh&lt;/code&gt; script to keep your customizations separate.&lt;/p&gt;

&lt;p&gt;Define &lt;code&gt;$CATALINA_OPTS&lt;/code&gt; inside &lt;code&gt;setenv.sh&lt;/code&gt;.  Include here and not in JAVA_OPTS all options, that should only be used by Tomcat itself, not by the stop process, the version command etc. Examples are heap size, GC logging, JMX ports etc.&lt;/p&gt;

&lt;p&gt;Example &lt;code&gt;setenv.sh&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;echo &amp;quot;Setting parameters from $CATALINA_BASE/bin/setenv.sh&amp;quot;
echo &amp;quot;_______________________________________________&amp;quot;

# discourage address map swapping by setting Xms and Xmx to the same value
# http://confluence.atlassian.com/display/DOC/Garbage+Collector+Performance+Issues
export CATALINA_OPTS=&amp;quot;$CATALINA_OPTS -Xms1024m&amp;quot;
export CATALINA_OPTS=&amp;quot;$CATALINA_OPTS -Xmx1025m&amp;quot;

# Increase maximum perm size for web base applications to 4x the default amount
# http://wiki.apache.org/tomcat/FAQ/Memoryhttp://wiki.apache.org/tomcat/FAQ/Memory
export CATALINA_OPTS=&amp;quot;$CATALINA_OPTS -XX:MaxPermSize=256m&amp;quot;

# Oracle Java as default, uses the serial garbage collector on the
# Full Tenured heap. The Young space is collected in parallel, but the
# Tenured is not. This means that at a time of load if a full collection
# event occurs, since the event is a &#39;stop-the-world&#39; serial event then
# all application threads other than the garbage collector thread are
# taken off the CPU. This can have severe consequences if requests continue
# to accrue during these &#39;outage&#39; periods. (specifically webservices, webapps)
# [Also enables adaptive sizing automatically]
export CATALINA_OPTS=&amp;quot;$CATALINA_OPTS -XX:+UseParallelGC&amp;quot;

# The hotspot server JVM has specific code-path optimizations
# which yield an approximate 10% gain over the client version.
export CATALINA_OPTS=&amp;quot;$CATALINA_OPTS -server&amp;quot;

# Disable remote (distributed) garbage collection by Java clients
# and remove ability for applications to call explicit GC collection
export CATALINA_OPTS=&amp;quot;$CATALINA_OPTS -XX:+DisableExplicitGC&amp;quot;

# Check for application specific parameters at startup
if [ -r &amp;quot;$CATALINA_BASE/bin/appenv.sh&amp;quot; ]; then
  . &amp;quot;$CATALINA_BASE/bin/appenv.sh&amp;quot;
fi

echo &amp;quot;Using CATALINA_OPTS:&amp;quot;
for arg in $CATALINA_OPTS
do
    echo &amp;quot;&amp;gt;&amp;gt; &amp;quot; $arg
done
echo &amp;quot;&amp;quot;

echo &amp;quot;Using JAVA_OPTS:&amp;quot;
for arg in $JAVA_OPTS
do
    echo &amp;quot;&amp;gt;&amp;gt; &amp;quot; $arg
done

echo &amp;quot;_______________________________________________&amp;quot;
echo &amp;quot;&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;4-migrate-logging-to-logback&#34;&gt;4. Migrate logging to Logback&lt;/h2&gt;

&lt;p&gt;Tomcat is configured to use Apache Commons Logging API by default.
If you are using &lt;a href=&#34;http://slf4j.org&#34; target=&#34;_blank&#34;&gt;slf4j&lt;/a&gt; in your application and familiar with &lt;a href=&#34;http://logback.qos.ch&#34; target=&#34;_blank&#34;&gt;Logback&lt;/a&gt;, then it is reasonable to migrate your tomcat configuration to logback too. You may find details &lt;a href=&#34;http://hwellmann.blogspot.com/2012/11/logging-with-slf4j-and-logback-in.html&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;links&#34;&gt;Links&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/kpavlov/tomcat-custom-env&#34; target=&#34;_blank&#34;&gt;https://github.com/kpavlov/tomcat-custom-env&lt;/a&gt; - Custom tomcat installation example on GitHub&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/terrancesnyder/tomcat&#34; target=&#34;_blank&#34;&gt;https://github.com/terrancesnyder/tomcat&lt;/a&gt; - Tomcat Best Practices Shell&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://hwellmann.blogspot.com/2012/11/logging-with-slf4j-and-logback-in.html&#34; target=&#34;_blank&#34;&gt;http://hwellmann.blogspot.com/2012/11/logging-with-slf4j-and-logback-in.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://gist.github.com/terrancesnyder/986029&#34; target=&#34;_blank&#34;&gt;https://gist.github.com/terrancesnyder/986029&lt;/a&gt; - example setenv.sh with defaults set for minimal time spent in garbage collection&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://wiki.apache.org/tomcat/FAQ/Memoryhttp://wiki.apache.org/tomcat/FAQ/Memory&#34; target=&#34;_blank&#34;&gt;http://wiki.apache.org/tomcat/FAQ/Memoryhttp://wiki.apache.org/tomcat/FAQ/Memory&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://confluence.atlassian.com/display/DOC/Garbage+Collector+Performance+Issues&#34; target=&#34;_blank&#34;&gt;http://confluence.atlassian.com/display/DOC/Garbage+Collector+Performance+Issues&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
  </channel>
</rss>