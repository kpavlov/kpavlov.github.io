<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>The Culture of Code</title>
    <link>https://konstantinpavlov.net/tags/programming/index.xml</link>
    <description>Recent content on The Culture of Code</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="https://konstantinpavlov.net/tags/programming/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>API Authentication: Generating HMAC digest in PHP and Java</title>
      <link>https://konstantinpavlov.net/blog/2015/05/20/api-authentication-generating-hmac-digest-in-php-and-java/</link>
      <pubDate>Wed, 20 May 2015 22:24:47 +0000</pubDate>
      
      <guid>https://konstantinpavlov.net/blog/2015/05/20/api-authentication-generating-hmac-digest-in-php-and-java/</guid>
      <description>&lt;p&gt;User authentication is an important part of the web service API design.
One of the common approach is the Hash-based Message Authentication Code &amp;ndash; &lt;abbr title=&#34;Hash-based Message Authentication Code&#34;&gt;&lt;a href=&#34;http://en.wikipedia.org/wiki/Hash-based_message_authentication_code&#34; title=&#34;Hash-based message authentication code&#34; target=&#34;_blank&#34;&gt;HMAC&lt;/a&gt;&lt;/abbr&gt;.
Used together with transport level security it provides reliable mechanizm of user authentication and message integrity validation.
&lt;/p&gt;

&lt;p&gt;Imagine, we want to create java web service for our customers.
Data encryption will be guaranteed by using https connection with TLS.
We will implement API user authentication by using public &lt;em&gt;API Key ID&lt;/em&gt; and a &lt;em&gt;API Key Secret&lt;/em&gt;.
User should generate an API Key: unique pair of &lt;em&gt;Key ID&lt;/em&gt; and a &lt;em&gt;Key Secret&lt;/em&gt; for his application.
User should send that &lt;em&gt;Key ID&lt;/em&gt;, message payload and a &lt;em&gt;digest&lt;/em&gt; with every request.
Digest is generated by signing all HTTP headers and message payload with &lt;em&gt;Key Secret&lt;/em&gt;.
(see &lt;a href=&#34;http://docs.aws.amazon.com/AmazonS3/latest/dev/RESTAuthentication.html#ConstructingTheCanonicalizedResourceElement&#34; title=&#34;Signing and Authenticating REST Requests by Amazon&#34; target=&#34;_blank&#34;&gt;Amazon&amp;rsquo;s recommendations&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;In PHP there is a function &lt;a href=&#34;http://php.net/manual/en/function.hash-hmac.php&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;hash_hmac&lt;/code&gt;&lt;/a&gt; for generating keyed hash value using the HMAC method. Here is the example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;?php

$keyId = &#39;d36cb306-9341-466f-a794-d49fbc485d8b&#39;;
$payload = &#39;{&amp;quot;command&amp;quot;: &amp;quot;buy&amp;quot;, &amp;quot;amount&amp;quot;:10, currency&amp;quot;:&amp;quot;EURUSD&amp;quot;}&#39;;
$secret = &#39;se1cr2et3w0r4d&#39;;

echo &#39;SHA-512 HMAC Digest: &#39;, hash_hmac(&#39;sha512&#39;, $keyId . $payload, $secret);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Output:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;SHA-512 HMAC Digest: 577a7927f55bc6ed1eaec08f7298e7c7596b6f951c4c6e8f24324fd9a1f0790adfdecbbd5ab73ad543fec7e6c3c23246a5dd8fae526e0b802ae99faccd06a29c
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Call PHP function &lt;a href=&#34;http://php.net/manual/en/function.hash-algos.php&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;hash_algos&lt;/code&gt;&lt;/a&gt; to get a list of supported algorithms.&lt;/p&gt;

&lt;p&gt;How to validate the digest in Java:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;String apiKey = ... // X-KEY
byte[] secret = ... // 
String rawPayload = ... 
String receivedDigest = ... //
...

Mac digest = Mac.getInstance(&amp;quot;HmacSHA512&amp;quot;);
SecretKeySpec secretKey = new SecretKeySpec(secret, HMAC_SHA_512);

digest.init(secretKey);
digest.update(apiKey.getBytes(StandardCharsets.UTF_8));
digest.update(rawPayload.getBytes(StandardCharsets.UTF_8));
final byte[] expectedDigest = digest.doFinal();
digest.reset();

final byte[] receivedDigestBytes = DatatypeConverter.parseHexBinary(receivedDigest);
if (!MessageDigest.isEqual(receivedDigestBytes, expectedDigest)) {
    // invalid digest
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;references&#34;&gt;References&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://docs.aws.amazon.com/AmazonS3/latest/dev/RESTAuthentication.html#ConstructingTheCanonicalizedResourceElement&#34; title=&#34;Signing and Authenticating REST Requests by Amazon&#34; target=&#34;_blank&#34;&gt;Amazon: Signing and Authenticating REST Requests&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.oclc.org/developer/develop/authentication/hmac-signature.en.html&#34; target=&#34;_blank&#34;&gt;OCLC: HMAC Signature&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://developers.coinbase.com/docs/wallet/api-key-authentication&#34; target=&#34;_blank&#34;&gt;Coinbase: API Key Authentication&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://restcookbook.com/Basics/loggingin/&#34; target=&#34;_blank&#34;&gt;The RESTful CookBook: HMAC&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
  </channel>
</rss>