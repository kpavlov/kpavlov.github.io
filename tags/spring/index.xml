<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Spring on The Culture of Code</title>
    <link>https://konstantinpavlov.net/tags/spring/index.xml</link>
    <description>Recent content in Spring on The Culture of Code</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="https://konstantinpavlov.net/tags/spring/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Spring&#43;Freemarker Tips</title>
      <link>https://konstantinpavlov.net/blog/2016/02/21/spring-freemarker-tips/</link>
      <pubDate>Sun, 21 Feb 2016 18:15:00 +0000</pubDate>
      
      <guid>https://konstantinpavlov.net/blog/2016/02/21/spring-freemarker-tips/</guid>
      <description>&lt;p&gt;I hope you will find following tips useful when developing &lt;a href=&#34;https://projects.spring.io/spring-boot&#34; target=&#34;_blank&#34;&gt;Spring Boot&lt;/a&gt; application with &lt;a href=&#34;http://freemarker.org&#34; target=&#34;_blank&#34;&gt;Freemarker&lt;/a&gt;.
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Booting Spring Webapp</title>
      <link>https://konstantinpavlov.net/blog/2015/02/19/booting-spring-webapp/</link>
      <pubDate>Thu, 19 Feb 2015 23:39:35 +0000</pubDate>
      
      <guid>https://konstantinpavlov.net/blog/2015/02/19/booting-spring-webapp/</guid>
      <description>&lt;p&gt;Spring Boot is an excellent tool to bootstrap java application.
Most of the references mention how to create a standalone java application, optionally with embedded web server (tomcat or jetty). But &lt;a href=&#34;http://projects.spring.io/spring-boot/&#34; title=&#34;Spring Boot Project&#34; target=&#34;_blank&#34;&gt;Spring Boot&lt;/a&gt; supports also creating web applications intended to run within servlet container.

Here is example of maven &lt;em&gt;pom.xml&lt;/em&gt; file for Spring-Boot-enabled web application:&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Conditional Java Configurations in Spring Framework</title>
      <link>https://konstantinpavlov.net/blog/2014/12/14/conditional-java-configurations-in-spring-framework/</link>
      <pubDate>Sun, 14 Dec 2014 11:22:29 +0000</pubDate>
      
      <guid>https://konstantinpavlov.net/blog/2014/12/14/conditional-java-configurations-in-spring-framework/</guid>
      <description>&lt;p&gt;Spring Framework offers very flexible means for binding application components.
Externalizable properties, composite configuration, nested application contexts and profiles.&lt;/p&gt;

&lt;!-- 
profile
:    A profile is a named logical grouping that may be activated programmatically via [`ConfigurableEnvironment.setActiveProfiles(java.lang.String...)`](http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/core/env/ConfigurableEnvironment.html#setActiveProfiles-java.lang.String...-) or declaratively through setting the `spring.profiles.active` property, usually through JVM system properties, as an environment variable, or for web applications as a Servlet context parameter in `web.xml` file.
 --&gt;

&lt;p&gt;Sometimes, it is necessary to control whether particular beans or &lt;a href=&#34;http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/context/annotation/Configuration.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;@Configuration&lt;/code&gt;&lt;/a&gt; will be loaded or not. Spring Framework v.4.1.x does not provide that feature out of the box. But, hopefully, Spring allows conditional bean initialization (see &lt;a href=&#34;http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/context/annotation/Profile.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;@Profile&lt;/code&gt;&lt;/a&gt; implementation and &lt;a href=&#34;http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/factory/annotation/Configurable.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;@Configurable&lt;/code&gt;&lt;/a&gt;).
So, I created the annotation &lt;a href=&#34;https://github.com/kpavlov/commons-spring/blob/master/src/main/java/com/github/kpavlov/commons/spring/annotations/Enabled.java&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;@Enabled&lt;/code&gt;&lt;/a&gt; which allows me to control bean instantiation via properties.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;@Enabled&lt;/code&gt; indicates that a component is eligible for registration when evaluated expression is true. This annotation should be used in conjunction with Configuration and Bean annotations.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>JAX-WS with Custom SSLSocketFactory</title>
      <link>https://konstantinpavlov.net/blog/2014/12/01/jax-ws-with-custom-sslsocketfactory/</link>
      <pubDate>Mon, 01 Dec 2014 14:34:00 +0000</pubDate>
      
      <guid>https://konstantinpavlov.net/blog/2014/12/01/jax-ws-with-custom-sslsocketfactory/</guid>
      <description>&lt;p&gt;It&amp;rsquo;s very easy to configure custom &lt;a href=&#34;https://docs.oracle.com/javase/8/docs/api/javax/net/ssl/SSLSocketFactory.html&#34; target=&#34;_blank&#34;&gt;SSLSocketFactory&lt;/a&gt; for JAX-WS web-service: just specify custom property referring to &lt;code&gt;SSLSocketFactory&lt;/code&gt; bean.
But there is a nuance&amp;hellip;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Webapp Inter-Communication in Tomcat</title>
      <link>https://konstantinpavlov.net/blog/2014/05/09/webapp-inter-communication-in-tomcat/</link>
      <pubDate>Fri, 09 May 2014 22:40:12 +0300</pubDate>
      
      <guid>https://konstantinpavlov.net/blog/2014/05/09/webapp-inter-communication-in-tomcat/</guid>
      <description>&lt;p&gt;&lt;em&gt;Sometimes you need to access services deployed in one web application from another web application within same application server. For Tomcat there is not so many options to do it. In this article we&amp;rsquo;ll discuss you how to use JMX for communication between web applications.&lt;/em&gt;
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Establishing Customizable Tomcat Configuration</title>
      <link>https://konstantinpavlov.net/blog/2014/03/22/establishing-customizable-tomcat-configuration/</link>
      <pubDate>Sat, 22 Mar 2014 12:40:16 +0300</pubDate>
      
      <guid>https://konstantinpavlov.net/blog/2014/03/22/establishing-customizable-tomcat-configuration/</guid>
      <description>&lt;p&gt;Deploying to &lt;a href=&#34;http://tomcat.apache.org&#34; target=&#34;_blank&#34;&gt;Apache Tomcat&lt;/a&gt; often requires making changes to default configuration.
These changes are often environment specific.
Also, when upgrading a Tomcat to new version you need to be sure that all your custom changes have not been lost and were applied to new configuration.
To deal with all that stuff Tomcat via separation of the configuration.
This post contains step-by-step instruction will help you to establish custom tomcat configuration.
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>How to Use Spring from EJB3</title>
      <link>https://konstantinpavlov.net/blog/2009/01/09/how-to-use-spring-from-ejb3/</link>
      <pubDate>Fri, 09 Jan 2009 17:23:00 +0000</pubDate>
      
      <guid>https://konstantinpavlov.net/blog/2009/01/09/how-to-use-spring-from-ejb3/</guid>
      <description>&lt;p&gt;This is a short instruction how to inject a spring-managed bean into EJB3 component:&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>How To Export Spring Managed Bean To JNDI</title>
      <link>https://konstantinpavlov.net/blog/2009/01/01/how-to-export-spring-managed-bean-to-jndi/</link>
      <pubDate>Thu, 01 Jan 2009 00:01:00 +0000</pubDate>
      
      <guid>https://konstantinpavlov.net/blog/2009/01/01/how-to-export-spring-managed-bean-to-jndi/</guid>
      <description>&lt;p&gt;Sometimes it is necessary to export a spring managed bean to JNDI context. Here I want to show how do it.&lt;/p&gt;

&lt;p&gt;In spring, there is a bean that provides a similar functionality for exporting to MBean server: MBeanExporter. Unfortunately, there is no standard JNDI bean exporter implementation in Spring Framework (current version is 2.5.6) - (Why?).
But it&amp;rsquo;s easy to write it yourself:&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>