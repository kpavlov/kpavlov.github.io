<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Java on The Culture of Code</title>
    <link>https://konstantinpavlov.net/tags/java/index.xml</link>
    <description>Recent content in Java on The Culture of Code</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="https://konstantinpavlov.net/tags/java/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Secure Java Coding Best Practices</title>
      <link>https://konstantinpavlov.net/blog/2015/08/01/secure-java-coding-best-practices/</link>
      <pubDate>Sat, 01 Aug 2015 22:22:34 +0000</pubDate>
      
      <guid>https://konstantinpavlov.net/blog/2015/08/01/secure-java-coding-best-practices/</guid>
      <description>&lt;p&gt;Making your web application flawless against security attacks is a challenge for every java developer.
In this article I will briefly describe common practical development techniques that can help you to achieve it.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.owasp.org/index.php/Top_10_2013-Table_of_Contents&#34; title=&#34;OWASP Top 10&#34; target=&#34;_blank&#34;&gt;OWASP Top 10&lt;/a&gt;, a list of the 10 Most Critical Web Application Security Risks, includes following risks:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A1 - Injection&lt;/li&gt;
&lt;li&gt;A2 - Broken Authentication &amp;amp; Session Management&lt;/li&gt;
&lt;li&gt;A3 - Cross-Site Scripting (XSS)&lt;/li&gt;
&lt;li&gt;A4 - Insecure Direct Object References&lt;/li&gt;
&lt;li&gt;A5 - Security Misconfiguration&lt;/li&gt;
&lt;li&gt;A6 - Sensitive Data Exposure&lt;/li&gt;
&lt;li&gt;A7 - Missing Function Level Access Control&lt;/li&gt;
&lt;li&gt;A8 - Cross-Site Request Forgery (CSRF)&lt;/li&gt;
&lt;li&gt;A9 - Using Components with Known Vulnerabilities&lt;/li&gt;
&lt;li&gt;A10 - Unvalidated Redirects and Forwards&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In this article I will highlight most important java coding techniques for building secure web applications.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Secure Java Logging with Logback</title>
      <link>https://konstantinpavlov.net/blog/2015/07/26/secure-java-logging-with-logback/</link>
      <pubDate>Sun, 26 Jul 2015 14:01:33 +0000</pubDate>
      
      <guid>https://konstantinpavlov.net/blog/2015/07/26/secure-java-logging-with-logback/</guid>
      <description>Deploying application into secure environment adds some restrictions on logging and log management. OWASP community gives some useful recommendations.
OWASP Security Testing Guide Recommendations OWASP Security Testing Guide defines a number of questions to be answered when reviewing applciaiton logging configuration (see OTG-CONFIG-002):
1. Do the logs contain sensitive information? Log files should not contain any sensitive data. Anyway, log file access must be restricted:
 Event log information should never be visible to end users.</description>
    </item>
    
    <item>
      <title>Implementing Automatic Reconnection for Netty Client</title>
      <link>https://konstantinpavlov.net/blog/2015/07/08/implementing-automatic-reconnection-for-netty-client/</link>
      <pubDate>Wed, 08 Jul 2015 07:48:05 +0000</pubDate>
      
      <guid>https://konstantinpavlov.net/blog/2015/07/08/implementing-automatic-reconnection-for-netty-client/</guid>
      <description>&lt;p&gt;One of the first requirement of &lt;a href=&#34;https://github.com/kpavlov/jreactive-8583&#34; target=&#34;_blank&#34;&gt;Netty ISO8588 client connector&lt;/a&gt; was the support for automatic reconnect.&lt;/p&gt;

&lt;p&gt;One of the first receipts I came across was &lt;a href=&#34;http://tterm.blogspot.com/2014/03/netty-tcp-client-with-reconnect-handling.html&#34; target=&#34;_blank&#34;&gt;Thomas Termin&amp;rsquo;s one&lt;/a&gt;. He suggests adding a ChannelHandler which will schedule the calling of client&amp;rsquo;s &lt;code&gt;connect()&lt;/code&gt; method once a Channel becomes inactive. Plus adding ChannelFutureListener which will re-create a bootstrap and re-connect if initial connection was failed.&lt;/p&gt;

&lt;p&gt;Although this is a working solution, I had a feeling that something is not optimal. Namely, the new Bootstrap is being created on every connection attempt.&lt;/p&gt;

&lt;p&gt;So, I created a FutureListener which should be registered once a Channel is closed.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Java Application Development Tutorial</title>
      <link>https://konstantinpavlov.net/blog/2015/06/17/java-application-development-tutorial/</link>
      <pubDate>Wed, 17 Jun 2015 09:55:16 +0000</pubDate>
      
      <guid>https://konstantinpavlov.net/blog/2015/06/17/java-application-development-tutorial/</guid>
      <description>&lt;p&gt;I&amp;rsquo;ve been meaning to write a small tutorial for building web applications. Now it&amp;rsquo;s time!
Let&amp;rsquo;s define the steps and choose some solutions for developing back-end java web application.&lt;/p&gt;

&lt;p&gt;I will give my design recommendations and list a technologies I would use. You may have your own opinion and you may share it in comment. Over time, this post may change since my favourites are also changing over time.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>API Authentication: Generating HMAC digest in PHP and Java</title>
      <link>https://konstantinpavlov.net/blog/2015/05/20/api-authentication-generating-hmac-digest-in-php-and-java/</link>
      <pubDate>Wed, 20 May 2015 22:24:47 +0000</pubDate>
      
      <guid>https://konstantinpavlov.net/blog/2015/05/20/api-authentication-generating-hmac-digest-in-php-and-java/</guid>
      <description>&lt;p&gt;User authentication is an important part of the web service API design.
One of the common approach is the Hash-based Message Authentication Code &amp;ndash; &lt;abbr title=&#34;Hash-based Message Authentication Code&#34;&gt;&lt;a href=&#34;http://en.wikipedia.org/wiki/Hash-based_message_authentication_code&#34; title=&#34;Hash-based message authentication code&#34; target=&#34;_blank&#34;&gt;HMAC&lt;/a&gt;&lt;/abbr&gt;.
Used together with transport level security it provides reliable mechanizm of user authentication and message integrity validation.
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Booting Spring Webapp</title>
      <link>https://konstantinpavlov.net/blog/2015/02/19/booting-spring-webapp/</link>
      <pubDate>Thu, 19 Feb 2015 23:39:35 +0000</pubDate>
      
      <guid>https://konstantinpavlov.net/blog/2015/02/19/booting-spring-webapp/</guid>
      <description>&lt;p&gt;Spring Boot is an excellent tool to bootstrap java application.
Most of the references mention how to create a standalone java application, optionally with embedded web server (tomcat or jetty). But &lt;a href=&#34;http://projects.spring.io/spring-boot/&#34; title=&#34;Spring Boot Project&#34; target=&#34;_blank&#34;&gt;Spring Boot&lt;/a&gt; supports also creating web applications intended to run within servlet container.

Here is example of maven &lt;em&gt;pom.xml&lt;/em&gt; file for Spring-Boot-enabled web application:&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Base64 Variants in Java 8</title>
      <link>https://konstantinpavlov.net/blog/2015/01/24/base64-variants-in-java-8/</link>
      <pubDate>Sat, 24 Jan 2015 04:45:10 +0000</pubDate>
      
      <guid>https://konstantinpavlov.net/blog/2015/01/24/base64-variants-in-java-8/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Conditional Java Configurations in Spring Framework</title>
      <link>https://konstantinpavlov.net/blog/2014/12/14/conditional-java-configurations-in-spring-framework/</link>
      <pubDate>Sun, 14 Dec 2014 11:22:29 +0000</pubDate>
      
      <guid>https://konstantinpavlov.net/blog/2014/12/14/conditional-java-configurations-in-spring-framework/</guid>
      <description>&lt;p&gt;Spring Framework offers very flexible means for binding application components.
Externalizable properties, composite configuration, nested application contexts and profiles.&lt;/p&gt;

&lt;!-- 
profile
:    A profile is a named logical grouping that may be activated programmatically via [`ConfigurableEnvironment.setActiveProfiles(java.lang.String...)`](http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/core/env/ConfigurableEnvironment.html#setActiveProfiles-java.lang.String...-) or declaratively through setting the `spring.profiles.active` property, usually through JVM system properties, as an environment variable, or for web applications as a Servlet context parameter in `web.xml` file.
 --&gt;

&lt;p&gt;Sometimes, it is necessary to control whether particular beans or &lt;a href=&#34;http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/context/annotation/Configuration.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;@Configuration&lt;/code&gt;&lt;/a&gt; will be loaded or not. Spring Framework v.4.1.x does not provide that feature out of the box. But, hopefully, Spring allows conditional bean initialization (see &lt;a href=&#34;http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/context/annotation/Profile.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;@Profile&lt;/code&gt;&lt;/a&gt; implementation and &lt;a href=&#34;http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/factory/annotation/Configurable.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;@Configurable&lt;/code&gt;&lt;/a&gt;).
So, I created the annotation &lt;a href=&#34;https://github.com/kpavlov/commons-spring/blob/master/src/main/java/com/github/kpavlov/commons/spring/annotations/Enabled.java&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;@Enabled&lt;/code&gt;&lt;/a&gt; which allows me to control bean instantiation via properties.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;@Enabled&lt;/code&gt; indicates that a component is eligible for registration when evaluated expression is true. This annotation should be used in conjunction with Configuration and Bean annotations.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>JDBC Driver Settings for Oracle RAC</title>
      <link>https://konstantinpavlov.net/blog/2014/12/07/jdbc-driver-settings-for-oracle-rac/</link>
      <pubDate>Sun, 07 Dec 2014 21:22:41 +0000</pubDate>
      
      <guid>https://konstantinpavlov.net/blog/2014/12/07/jdbc-driver-settings-for-oracle-rac/</guid>
      <description>&lt;p&gt;If you are modifying your java application to use Oracle Real Application Clustered (RAC) Database instead of standard single-node database server (Express or Standard edition), then you need to modify settings of your JDBC driver.
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>JAX-WS with Custom SSLSocketFactory</title>
      <link>https://konstantinpavlov.net/blog/2014/12/01/jax-ws-with-custom-sslsocketfactory/</link>
      <pubDate>Mon, 01 Dec 2014 14:34:00 +0000</pubDate>
      
      <guid>https://konstantinpavlov.net/blog/2014/12/01/jax-ws-with-custom-sslsocketfactory/</guid>
      <description>&lt;p&gt;It&amp;rsquo;s very easy to configure custom &lt;a href=&#34;https://docs.oracle.com/javase/8/docs/api/javax/net/ssl/SSLSocketFactory.html&#34; target=&#34;_blank&#34;&gt;SSLSocketFactory&lt;/a&gt; for JAX-WS web-service: just specify custom property referring to &lt;code&gt;SSLSocketFactory&lt;/code&gt; bean.
But there is a nuance&amp;hellip;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>WebJars: Easy Packaging Client Libraries</title>
      <link>https://konstantinpavlov.net/blog/2014/07/20/webjars-easy-packaging-client-libraries/</link>
      <pubDate>Sun, 20 Jul 2014 22:00:48 +0300</pubDate>
      
      <guid>https://konstantinpavlov.net/blog/2014/07/20/webjars-easy-packaging-client-libraries/</guid>
      <description>When developing java web application it is often annoying to manage third-party javascript libraries. Especially, when it is necessary to upgrade some of them.
The project &amp;laquo;WebJars&amp;raquo; makes a life easier for such lazyefficient developers, like me :-)
There is a wide range of popular javascript libraries packaged int Jar archives and ready to be included as a dependencies into your project. It is described in the documentation how to configure resource mapping in a web framework of your choice.</description>
    </item>
    
    <item>
      <title>Jolokia: HTTP/JSON bridge for JMX</title>
      <link>https://konstantinpavlov.net/blog/2014/06/09/jolokia-http/json-bridge-for-jmx/</link>
      <pubDate>Mon, 09 Jun 2014 13:17:37 +0300</pubDate>
      
      <guid>https://konstantinpavlov.net/blog/2014/06/09/jolokia-http/json-bridge-for-jmx/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://upload.wikimedia.org/wikipedia/commons/thumb/6/69/BhutJolokia09_Asit.jpg/640px-BhutJolokia09_Asit.jpg&#34; alt=&#34;Jolokia Logo&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Very often there is a need to monitor the Java application server.
For example, external monitoring tool, like Nagious/Zenoss/Zabbix needs to get some metrics, like heap memory usage or thread count.&lt;/p&gt;

&lt;p&gt;Usual way to get that metrics is to setup access to application server via JMX.&lt;/p&gt;

&lt;p&gt;But, sometimes, it is not possible to leave some other port opened for JMX and the only port available is HTTP(80 or 8080) or HTTPS(443 or 8443).&lt;/p&gt;

&lt;p&gt;Here the &lt;a href=&#34;http://www.jolokia.org&#34; title=&#34;Jolokia Project&#34; target=&#34;_blank&#34;&gt;Jolokia&lt;/a&gt; comes to rescue!
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>JSON Validation with JSON Schema</title>
      <link>https://konstantinpavlov.net/blog/2014/05/10/json-validation-with-json-schema/</link>
      <pubDate>Sat, 10 May 2014 15:48:12 +0300</pubDate>
      
      <guid>https://konstantinpavlov.net/blog/2014/05/10/json-validation-with-json-schema/</guid>
      <description>&lt;p&gt;JSON has became a de-facto standard for webservices, replacing XML web services.
It has native support in web browser clients.&lt;/p&gt;

&lt;p&gt;That makes JSON is the standard of choice for UI-oriented services.
It has a good support on mobile devices.
Also, it provides smaller data payload size compared to XML and it&amp;rsquo;s very sufficient for high-load systems as it saves a traffic.
But what is for data validation?
For XML web services there is a XML Schema.
It comes ti mind, that similar standard for JSON should be called &lt;a href=&#34;http://json-schema.org/&#34; target=&#34;_blank&#34;&gt;&amp;laquo;JSON Schema&amp;raquo;&lt;/a&gt;.
And it really exists!&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Webapp Inter-Communication in Tomcat</title>
      <link>https://konstantinpavlov.net/blog/2014/05/09/webapp-inter-communication-in-tomcat/</link>
      <pubDate>Fri, 09 May 2014 22:40:12 +0300</pubDate>
      
      <guid>https://konstantinpavlov.net/blog/2014/05/09/webapp-inter-communication-in-tomcat/</guid>
      <description>&lt;p&gt;&lt;em&gt;Sometimes you need to access services deployed in one web application from another web application within same application server. For Tomcat there is not so many options to do it. In this article we&amp;rsquo;ll discuss you how to use JMX for communication between web applications.&lt;/em&gt;
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Getting More Entropy in Java on Linux</title>
      <link>https://konstantinpavlov.net/blog/2014/03/21/getting-more-entropy-in-java-on-linux/</link>
      <pubDate>Fri, 21 Mar 2014 12:30:27 +0300</pubDate>
      
      <guid>https://konstantinpavlov.net/blog/2014/03/21/getting-more-entropy-in-java-on-linux/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://31.media.tumblr.com/4166367386765fe2b5f9845906898214/tumblr_inline_n2r2coHbTe1rx1usu.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Setting entropy pool for Java server on linux is fair simple. Just add a system property to specify a device to read from.
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Video: Scalable Memory Allocation using jemalloc Tech Talk (1/11/2011)</title>
      <link>https://konstantinpavlov.net/blog/2014/03/01/video-scalable-memory-allocation-using-jemalloc-tech-talk-1/11/2011/</link>
      <pubDate>Sat, 01 Mar 2014 12:30:28 +0200</pubDate>
      
      <guid>https://konstantinpavlov.net/blog/2014/03/01/video-scalable-memory-allocation-using-jemalloc-tech-talk-1/11/2011/</guid>
      <description>Video: Scalable Memory Allocation using jemalloc - Tech Talk (1/11/2011)
jemalloc project: https://github.com/jemalloc/jemalloc</description>
    </item>
    
    <item>
      <title>Chronicle</title>
      <link>https://konstantinpavlov.net/blog/2014/02/19/chronicle/</link>
      <pubDate>Wed, 19 Feb 2014 12:30:42 +0200</pubDate>
      
      <guid>https://konstantinpavlov.net/blog/2014/02/19/chronicle/</guid>
      <description>Chronicle by Peter Lawrey:
 This library is an ultra low latency, high throughput, persisted, messaging and event driven in memory database. The typical latency is as low as 80 nano-seconds and supports throughput of 5-20 million messages/record updates per second.
This library also supports distributed, durable, observable collections (Map, List, Set) The performance depends on the data structures used, but simple data structures can achieve throughput of 5 million elements or key/value pairs in batches (eg addAll or putAll) and 500K elements or key/values per second when added/updated/removed individually.</description>
    </item>
    
    <item>
      <title>JVM Profiling Mode</title>
      <link>https://konstantinpavlov.net/blog/2014/01/18/jvm-profiling-mode/</link>
      <pubDate>Sat, 18 Jan 2014 12:33:12 +0300</pubDate>
      
      <guid>https://konstantinpavlov.net/blog/2014/01/18/jvm-profiling-mode/</guid>
      <description>There is no sense to run profiler in instrumentation mode on a high load.
Instead of using instrumentation you should use sampling mode.
This article describes the difference between instrumentation and sampling modes. JVisualVM is a good free tool for this task.</description>
    </item>
    
    <item>
      <title>Give Good Names for Your Threads</title>
      <link>https://konstantinpavlov.net/blog/2014/01/16/give-good-names-for-your-threads/</link>
      <pubDate>Thu, 16 Jan 2014 12:16:26 +0000</pubDate>
      
      <guid>https://konstantinpavlov.net/blog/2014/01/16/give-good-names-for-your-threads/</guid>
      <description>When configuring executors in multithreaded application, do not forget to assign names to your threads. It simplifies later profiling a lot, when you see a meaningful thread names in your profiler.
For example, you may use CustomizableThreadFactory from SpringFramework for that.</description>
    </item>
    
    <item>
      <title>Migrating Logback Configuration from XML to Groovy</title>
      <link>https://konstantinpavlov.net/blog/2013/11/21/migrating-logback-configuration-from-xml-to-groovy/</link>
      <pubDate>Thu, 21 Nov 2013 15:44:14 +0300</pubDate>
      
      <guid>https://konstantinpavlov.net/blog/2013/11/21/migrating-logback-configuration-from-xml-to-groovy/</guid>
      <description>I&amp;rsquo;ve recently switched logback configuration of our application from XML to Groovy.
Configuration file is not about 5 times smaller and can be displayed on one screen!
Groovy helped to remove duplicating parts of configurations by using for loop.
The moving was easy thanks to online conversion tool. And don&amp;rsquo;t forget to add a groovy-all runtime dependency to your project config.</description>
    </item>
    
    <item>
      <title>Netty: How to Initiate SSL Handshake From Client</title>
      <link>https://konstantinpavlov.net/blog/2013/04/23/netty-how-to-initiate-ssl-handshake-from-client/</link>
      <pubDate>Tue, 23 Apr 2013 12:55:57 +0000</pubDate>
      
      <guid>https://konstantinpavlov.net/blog/2013/04/23/netty-how-to-initiate-ssl-handshake-from-client/</guid>
      <description>&lt;p&gt;I have had spent some time recently making netty 3.6 sending some message when connection has been established.&lt;/p&gt;

&lt;p&gt;What documentation suggests to do is to extend &lt;code&gt;SimpleChannelUpstreamHandler&lt;/code&gt; and override method &lt;code&gt;channelConnected(...)&lt;/code&gt;.
It works fine unless &lt;code&gt;SslHandler&lt;/code&gt; is used in the pipeline.
If handler is present, &lt;code&gt;channelConnected()&lt;/code&gt; was never called on my handler.

The problem was caused by client, which did not initialized SSL handshake on connection.
Until handshake completed, no other &lt;code&gt;ChannelHandlers&lt;/code&gt; are notified.
Hopefully, there is a convenient way to initiate handshake on the client. Netty documentation states:&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Using Expected Exceptions in UnitTests</title>
      <link>https://konstantinpavlov.net/blog/2013/04/22/using-expected-exceptions-in-unittests/</link>
      <pubDate>Mon, 22 Apr 2013 11:17:01 +0300</pubDate>
      
      <guid>https://konstantinpavlov.net/blog/2013/04/22/using-expected-exceptions-in-unittests/</guid>
      <description>&lt;p&gt;Sometimes, reviewing code, I see misunderstanding of using &lt;em&gt;Expected Exception&lt;/em&gt; concept in unit tests.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Configuring Protobuf to Java compiler in maven</title>
      <link>https://konstantinpavlov.net/blog/2012/05/20/configuring-protobuf-to-java-compiler-in-maven/</link>
      <pubDate>Sun, 20 May 2012 21:51:00 +0300</pubDate>
      
      <guid>https://konstantinpavlov.net/blog/2012/05/20/configuring-protobuf-to-java-compiler-in-maven/</guid>
      <description>&lt;p&gt;Here are few steps to configure protobuf-to-java compilation in your maven project:&lt;/p&gt;

&lt;p&gt;Install google protobuf compiler on your computer.&lt;/p&gt;

&lt;p&gt;Configure maven protobuf compiler plugin and dependency in  &lt;em&gt;pom.xml&lt;/em&gt; :&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Java-protobuf-format: Easy Protobuf-to-JSON Serialization in Java</title>
      <link>https://konstantinpavlov.net/blog/2012/04/22/java-protobuf-format-easy-protobuf-to-json-serialization-in-java/</link>
      <pubDate>Sun, 22 Apr 2012 13:09:42 +0000</pubDate>
      
      <guid>https://konstantinpavlov.net/blog/2012/04/22/java-protobuf-format-easy-protobuf-to-json-serialization-in-java/</guid>
      <description>&lt;p&gt;If you need Google Protobuf-to-JSON serialization (and vice versa) there is quick solution.
&lt;a href=&#34;http://code.google.com/p/protobuf-java-format/&#34; target=&#34;_blank&#34;&gt;Protobuf-java-format&lt;/a&gt; library provides serialization of protobuf-generated java classes to number of formats: JSON, XML, HTML, Java property file format, Smile, CoachDB.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>GWT is about to add Native JSON function support in version 2.1</title>
      <link>https://konstantinpavlov.net/blog/2010/07/22/gwt-is-about-to-add-native-json-function-support-in-version-2.1/</link>
      <pubDate>Thu, 22 Jul 2010 17:20:00 +0000</pubDate>
      
      <guid>https://konstantinpavlov.net/blog/2010/07/22/gwt-is-about-to-add-native-json-function-support-in-version-2.1/</guid>
      <description>&lt;p&gt;GWT 2.1 has reached Milestone 2.
One of the new features in version 2.1 is support for browser&amp;rsquo;s native JSON function in &lt;code&gt;JSONParser&lt;/code&gt; class.

Now there are three methods JSONParser which may be used to parse JSON string:&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>How to Use Spring from EJB3</title>
      <link>https://konstantinpavlov.net/blog/2009/01/09/how-to-use-spring-from-ejb3/</link>
      <pubDate>Fri, 09 Jan 2009 17:23:00 +0000</pubDate>
      
      <guid>https://konstantinpavlov.net/blog/2009/01/09/how-to-use-spring-from-ejb3/</guid>
      <description>&lt;p&gt;This is a short instruction how to inject a spring-managed bean into EJB3 component:&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>How To Export Spring Managed Bean To JNDI</title>
      <link>https://konstantinpavlov.net/blog/2009/01/01/how-to-export-spring-managed-bean-to-jndi/</link>
      <pubDate>Thu, 01 Jan 2009 00:01:00 +0000</pubDate>
      
      <guid>https://konstantinpavlov.net/blog/2009/01/01/how-to-export-spring-managed-bean-to-jndi/</guid>
      <description>&lt;p&gt;Sometimes it is necessary to export a spring managed bean to JNDI context. Here I want to show how do it.&lt;/p&gt;

&lt;p&gt;In spring, there is a bean that provides a similar functionality for exporting to MBean server: MBeanExporter. Unfortunately, there is no standard JNDI bean exporter implementation in Spring Framework (current version is 2.5.6) - (Why?).
But it&amp;rsquo;s easy to write it yourself:&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Configuring WS-Security for Axis 1.4 client</title>
      <link>https://konstantinpavlov.net/blog/2007/05/23/configuring-ws-security-for-axis-1.4-client/</link>
      <pubDate>Wed, 23 May 2007 14:13:00 +0000</pubDate>
      
      <guid>https://konstantinpavlov.net/blog/2007/05/23/configuring-ws-security-for-axis-1.4-client/</guid>
      <description>&lt;p&gt;I was looking how to enable WS-Security features in the Axis client to my web service application. I have tested it with Axis 1.4 client.

The things you need to configure axis client are:&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>