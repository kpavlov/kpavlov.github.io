<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Java on The Culture of Code</title>
    <link>https://konstantinpavlov.net/tags/java/index.xml</link>
    <description>Recent content in Java on The Culture of Code</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="https://konstantinpavlov.net/tags/java/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Logging Policy</title>
      <link>https://konstantinpavlov.net/blog/2017/03/28/logging-policy/</link>
      <pubDate>Tue, 28 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>https://konstantinpavlov.net/blog/2017/03/28/logging-policy/</guid>
      <description>&lt;p&gt;There are different points of view on how logging levels should be used in code. I will share mine.&lt;/p&gt;

&lt;p&gt;My assumption is: &lt;strong&gt;&amp;laquo;There should be no errors in logs when everything is fine.&amp;raquo;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The idea is that &lt;em&gt;the strongest log level should trigger alarm causing immediate notification (push or SMS) to operations team.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Accordingly, that&amp;rsquo;s how logging levels should be used:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;error&lt;/code&gt; &amp;ndash; Some action should be taken &lt;strong&gt;immediately!&lt;/strong&gt; Ops team should enable email or sms notifications when a message of that king appears in logs.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;warn&lt;/code&gt; &amp;ndash; Some action should be taken, but &lt;strong&gt;later.&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;info&lt;/code&gt; (enabled by default) &amp;ndash; Use this to print information you want to see in logs when your application works normally.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;debug&lt;/code&gt; (disabled by default) &amp;ndash; Use it to trace application business logic. Normally this should be disabled on production.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;trace&lt;/code&gt; (disabled by default) &amp;ndash; Use it to print raw messages (requests and responses). This is dangerous when you deal with confidential information since you may print it to logs causing security leak.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I saw other approaches to logging:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Using separate logger for alerts.&lt;/em&gt; &amp;ndash; In this case only explicitly specified alerts will be sent. You will never receive an alert from third party component since it does not know about your alert logger.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Abusing exceptions, throwing them even in expected cases.&lt;/em&gt; &amp;ndash; It will cause a lot of information noise in logs making difficult to find really important messages.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Not using &lt;code&gt;warn&lt;/code&gt; level at all. Just &amp;laquo;Black or White&amp;raquo; approach.&lt;/em&gt; &amp;ndash; Why not make use of this logging level making logs more fine-grained?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;How the logging is used depends much on type of the business and SLAs required and also on agreements and collaboration between developers and operations team. The mentioned policy may not fit your project and it&amp;rsquo;s OK :-)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Secure Java Coding Best Practices</title>
      <link>https://konstantinpavlov.net/blog/2015/08/01/secure-java-coding-best-practices/</link>
      <pubDate>Sat, 01 Aug 2015 22:22:34 +0000</pubDate>
      
      <guid>https://konstantinpavlov.net/blog/2015/08/01/secure-java-coding-best-practices/</guid>
      <description>&lt;p&gt;Making your web application flawless against security attacks is a challenge for every java developer.
In this article I will briefly describe common practical development techniques that can help you to achieve it.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.owasp.org/index.php/Top_10_2013-Table_of_Contents&#34; title=&#34;OWASP Top 10&#34; target=&#34;_blank&#34;&gt;OWASP Top 10&lt;/a&gt;, a list of the 10 Most Critical Web Application Security Risks, includes following risks:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A1 - Injection&lt;/li&gt;
&lt;li&gt;A2 - Broken Authentication &amp;amp; Session Management&lt;/li&gt;
&lt;li&gt;A3 - Cross-Site Scripting (XSS)&lt;/li&gt;
&lt;li&gt;A4 - Insecure Direct Object References&lt;/li&gt;
&lt;li&gt;A5 - Security Misconfiguration&lt;/li&gt;
&lt;li&gt;A6 - Sensitive Data Exposure&lt;/li&gt;
&lt;li&gt;A7 - Missing Function Level Access Control&lt;/li&gt;
&lt;li&gt;A8 - Cross-Site Request Forgery (CSRF)&lt;/li&gt;
&lt;li&gt;A9 - Using Components with Known Vulnerabilities&lt;/li&gt;
&lt;li&gt;A10 - Unvalidated Redirects and Forwards&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In this article I will highlight most important java coding techniques for building secure web applications.&lt;/p&gt;

&lt;h2 id=&#34;use-sql-prepared-statements-a1-a1&#34;&gt;Use SQL Prepared Statements (&lt;a href=&#34;https://www.owasp.org/index.php/Top_10_2013-A1-Injection&#34; target=&#34;_blank&#34;&gt;A1&lt;/a&gt;)&lt;/h2&gt;

&lt;p&gt;Bind user data to request parameters of the &lt;code&gt;PreparedStatement&lt;/code&gt;. Never construct dynamic sql queries directly, without escaping parameter escaping.&lt;/p&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;SELECT * FROM Users WHERE username = &#39;&amp;quot; +  userName + &amp;quot;&#39;&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The query with input &lt;code&gt;foo OR 1=1&lt;/code&gt; will select all data from table.&lt;/p&gt;

&lt;p&gt;For plain JDBC use:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;String query = &amp;quot;SELECT * FROM Users WHERE name = ?&amp;quot;;
PreparedStatement statement = connection.prepareStatement(query);
statement.setString(1, userName);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For Hibernate use:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;String query = &amp;quot;SELECT * FROM USERS WHERE name = :userName&amp;quot;;
TypedQuery&amp;lt;User&amp;gt; query = em.createQuery(query, User.class);
query.setParameter(“userName”, userName);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;encode-user-data-a3-a3-a10-a10&#34;&gt;Encode User Data (&lt;a href=&#34;https://www.owasp.org/index.php/Top_10_2013-A3-Cross-Site_Scripting_%28XSS%29&#34; target=&#34;_blank&#34;&gt;A3&lt;/a&gt;, &lt;a href=&#34;https://www.owasp.org/index.php/Top_10_2013-A10-Unvalidated_Redirects_and_Forwards&#34; target=&#34;_blank&#34;&gt;A10&lt;/a&gt;)&lt;/h2&gt;

&lt;p&gt;When rendering user-generated content, always encode it properly. This prevents Cross-Site Scripting (XSS).&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;In JSP use &lt;a href=&#34;https://jstl.java.net/&#34; title=&#34;JSP Standard Tag Library&#34; target=&#34;_blank&#34;&gt;JSTL tags&lt;/a&gt;
Use &lt;code&gt;c:out&lt;/code&gt; tag. Attribute &lt;code&gt;escapeXml&lt;/code&gt; is &lt;strong&gt;&amp;laquo;true&amp;raquo;&lt;/strong&gt; by default, so you may omit it:&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-jsp&#34;&gt;&amp;lt;c:out value=&amp;quot;${variable}&amp;quot;/&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;When using Spring Framework with JSP view, use &lt;a href=&#34;http://docs.spring.io/spring/docs/current/spring-framework-reference/html/view.html#view-jsp&#34; target=&#34;_blank&#34;&gt;Spring&amp;rsquo;s &lt;code&gt;form&lt;/code&gt; tags&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-jsp&#34;&gt;&amp;lt;%@ taglib prefix=&amp;quot;form&amp;quot; uri=&amp;quot;http://www.springframework.org/tags/form&amp;quot; %&amp;gt;
&amp;lt;form:form&amp;gt;
&amp;lt;table&amp;gt;
    &amp;lt;tr&amp;gt;
        &amp;lt;td&amp;gt;First Name:&amp;lt;/td&amp;gt;
        &amp;lt;td&amp;gt;&amp;lt;form:input path=&amp;quot;firstName&amp;quot; /&amp;gt;&amp;lt;/td&amp;gt;
    &amp;lt;/tr&amp;gt;
    &amp;lt;tr&amp;gt;
        &amp;lt;td&amp;gt;Last Name:&amp;lt;/td&amp;gt;
        &amp;lt;td&amp;gt;&amp;lt;form:input path=&amp;quot;lastName&amp;quot; /&amp;gt;&amp;lt;/td&amp;gt;
    &amp;lt;/tr&amp;gt;
    &amp;lt;tr&amp;gt;
        &amp;lt;td colspan=&amp;quot;2&amp;quot;&amp;gt;
            &amp;lt;input type=&amp;quot;submit&amp;quot; value=&amp;quot;Save Changes&amp;quot; /&amp;gt;
        &amp;lt;/td&amp;gt;
    &amp;lt;/tr&amp;gt;
&amp;lt;/table&amp;gt;
&amp;lt;/form:form&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;When using Spring Framework with &lt;a href=&#34;http://docs.spring.io/spring/docs/current/spring-framework-reference/html/view.html#view-velocity&#34; target=&#34;_blank&#34;&gt;Freemarker and Velocity&lt;/a&gt;, use &lt;code&gt;bindEscaped&lt;/code&gt; and &lt;code&gt;form&lt;/code&gt; macros.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;check-access-a4-a4-a7-a7&#34;&gt;Check Access (&lt;a href=&#34;https://www.owasp.org/index.php/Top_10_2013-A4-Insecure_Direct_Object_References&#34; target=&#34;_blank&#34;&gt;A4&lt;/a&gt;, &lt;a href=&#34;https://www.owasp.org/index.php/Top_10_2013-A7-Missing_Function_Level_Access_Control&#34; target=&#34;_blank&#34;&gt;A7&lt;/a&gt;)&lt;/h2&gt;

&lt;p&gt;Always check data and functional access. Each use of a direct object reference from an untrusted source must include an access control check to ensure the user is authorized for the requested object.
Spring Security provides the comprehensive methods to implement functional access.
Data access (SQL) usually requires correctly constructing of the SQL query.&lt;/p&gt;

&lt;h2 id=&#34;use-http-headers-a1-a1-a3-a3&#34;&gt;Use HTTP Headers (&lt;a href=&#34;https://www.owasp.org/index.php/Top_10_2013-A1-Injection&#34; target=&#34;_blank&#34;&gt;A1&lt;/a&gt;, &lt;a href=&#34;https://www.owasp.org/index.php/Top_10_2013-A3-Cross-Site_Scripting_%28XSS%29&#34; target=&#34;_blank&#34;&gt;A3&lt;/a&gt;)&lt;/h2&gt;

&lt;p&gt;Use browser headers to prevent XSS and data-injection attacks:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-http&#34;&gt;X-Frame-Options: DENY
X-XSS-Protection: 1; mode=block
X-Content-Type-Options: nosniff
Content-Security-Policy: default-src https://myhost.com
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Spring-Security provides a set of &lt;a href=&#34;http://docs.spring.io/autorepo/docs/spring-security/current/apidocs/org/springframework/security/config/annotation/web/builders/HttpSecurity.html&#34; target=&#34;_blank&#34;&gt;header filters&lt;/a&gt; out of the box ():&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;@Configuration
@EnableWebMvcSecurity
public class WebSecurityConfig extends WebSecurityConfigurerAdapter {
    @Override
    protected void configure(HttpSecurity http) throws Exception {
        http
            .headers()
                .contentTypeOptions();
                .xssProtection()
                .cacheControl()
                .httpStrictTransportSecurity()
                .frameOptions()
                .and()
            ...;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;use-content-security-policy-header&#34;&gt;Use Content-Security-Policy Header&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://www.owasp.org/index.php/Content_Security_Policy&#34; target=&#34;_blank&#34;&gt;Content-Security-Policy&lt;/a&gt; is an &lt;a href=&#34;https://w3c.github.io/webappsec/specs/content-security-policy/&#34; target=&#34;_blank&#34;&gt;W3C specification&lt;/a&gt; offering the possibility to instruct the client browser from which location and/or which type of resources are allowed to be loaded. To define a loading behavior, the CSP specification use &amp;laquo;directive&amp;raquo; where a directive defines a loading behavior for a target resource type.&lt;/p&gt;

&lt;p&gt;Directives can be specified using HTTP response header (a server may send more than one CSP HTTP header field with a given resource representation and a server may send different CSP header field values with different representations of the same resource or with different resources) or HTML Meta tag, the HTTP headers below are defined by the specs:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Content-Security-Policy&lt;/code&gt; : Defined by W3C Specs as standard header, used by Chrome version 25 and later, Firefox version 23 and later, Opera version 19 and later.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;X-Content-Security-Policy&lt;/code&gt; : Used by Firefox until version 23, and Internet Explorer version 10 (which partially implements Content Security Policy).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;X-WebKit-CSP&lt;/code&gt; : Used by Chrome until version 25&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The supported directives you may find at &lt;a href=&#34;https://w3c.github.io/webappsec/specs/content-security-policy/#directives&#34; target=&#34;_blank&#34;&gt;W3C specification&lt;/a&gt; page.&lt;/p&gt;

&lt;p&gt;As fallback default you may use &lt;strong&gt;&lt;code&gt;default-src&lt;/code&gt;&lt;/strong&gt; directive. It defines loading policy for all resources type in case of a resource type dedicated directive is not defined.&lt;/p&gt;

&lt;h2 id=&#34;use-spring-security-csrf-protection-a8-a8&#34;&gt;Use Spring-Security CSRF Protection (&lt;a href=&#34;https://www.owasp.org/index.php/Top_10_2013-A8-Cross-Site_Request_Forgery_%28CSRF%29&#34; target=&#34;_blank&#34;&gt;A8&lt;/a&gt;)&lt;/h2&gt;

&lt;p&gt;Spring-Security provides a [CSRF] protection out of the box using &lt;a href=&#34;https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet#General_Recommendation:_Synchronizer_Token_Pattern&#34; target=&#34;_blank&#34;&gt;Synchronizer Token Pattern&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;Configure CSRF token support:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;@Configuration
@EnableWebMvcSecurity
public class WebSecurityConfig extends WebSecurityConfigurerAdapter {
    @Override
    protected void configure(HttpSecurity http) throws Exception {
        http
            .csrf()
                .and()
            ...;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Include &lt;code&gt;_csrf.token&lt;/code&gt; hidden field to your forms:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;form action=&amp;quot;...&amp;quot; method=&amp;quot;post&amp;quot;&amp;gt;
&amp;lt;input type=&amp;quot;hidden&amp;quot;
    name=&amp;quot;${_csrf.parameterName}&amp;quot;
    value=&amp;quot;${_csrf.token}&amp;quot;/&amp;gt;
...
&amp;lt;/form&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;disable-xml-external-entity-xxe-processing-a1-a1-a6-a6&#34;&gt;Disable XML External Entity (XXE) Processing (&lt;a href=&#34;https://www.owasp.org/index.php/Top_10_2013-A1-Injection&#34; target=&#34;_blank&#34;&gt;A1&lt;/a&gt;, &lt;a href=&#34;https://www.owasp.org/index.php/Top_10_2013-A6-Sensitive_Data_Exposure&#34; target=&#34;_blank&#34;&gt;A6&lt;/a&gt;)&lt;/h2&gt;

&lt;p&gt;Processing of&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;ISO-8859-1&amp;quot;?&amp;gt;
&amp;lt;!DOCTYPE request [
&amp;lt;!ENTITY
include SYSTEM “file=/etc/passwd&amp;quot;
 &amp;gt;
]&amp;gt;
&amp;lt;request&amp;gt;
&amp;lt;description&amp;gt;
&amp;amp;include;
 &amp;lt;/description&amp;gt;
...
&amp;lt;/request&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;&amp;amp;include;&lt;/code&gt; will be replaced with a real data, like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;root:x:0:0:root:/root:/bin/bash
daemon:x:1:1:daemon:/usr/sbin:/bin/sh
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To prevent data exposure (&lt;a href=&#34;https://www.owasp.org/index.php/Top_10_2013-A6-Sensitive_Data_Exposure&#34; target=&#34;_blank&#34;&gt;A6&lt;/a&gt;) and injection (&lt;a href=&#34;https://www.owasp.org/index.php/Top_10_2013-A1-Injection&#34; target=&#34;_blank&#34;&gt;A1&lt;/a&gt;) disable some &lt;a href=&#34;http://docs.oracle.com/javase/8/docs/api/javax/xml/parsers/DocumentBuilderFactory.html#setFeature-java.lang.String-boolean-&#34; target=&#34;_blank&#34;&gt;DocumentBuilderFactory&lt;/a&gt; features:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;DocumentBuilderFactory dbf = new DocumentBuilderFactory();

dbf.setFeature(javax.xml.XMLConstants.FEATURE_SECURE_PROCESSING);

// Do not include external entities
dbf.setFeature(&amp;quot;http://xml.org/sax/features/external-general-entities&amp;quot;, false);

// Disallow DTD inlining by setting this feature to true
dbf.setFeature(&amp;quot;http://apache.org/xml/features/disallow-doctype-decl&amp;quot;, true);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;data-protection-coding-practices-a6-a6&#34;&gt;Data Protection Coding Practices (&lt;a href=&#34;https://www.owasp.org/index.php/Top_10_2013-A6-Sensitive_Data_Exposure&#34; target=&#34;_blank&#34;&gt;A6&lt;/a&gt;)&lt;/h2&gt;

&lt;p&gt;Without proper server access protection, it is possible to take a whole dump of the process memory with &lt;code&gt;gdb&lt;/code&gt; (&lt;code&gt;gdb --pid [pid]&lt;/code&gt;).
So the developer should make an extra steps for securing data stored in memory.&lt;/p&gt;

&lt;p&gt;The main idea is to keep sensitive data in memory as less time as possible.&lt;/p&gt;

&lt;h3 id=&#34;1-never-hardcode-passwords&#34;&gt;1. Never hardcode passwords&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Don&amp;rsquo;t store the passwords/keys in your code.&lt;/strong&gt;
Your code should be immediately available to be open-sourced without disclosing any sensitive data.&lt;/p&gt;

&lt;h3 id=&#34;2-avoid-storing-sensitive-date-in-a-heap&#34;&gt;2. Avoid storing sensitive date in a heap&lt;/h3&gt;

&lt;p&gt;Objects allocated in a Heap memory whereas primitives can be allocated in stack are&lt;/p&gt;

&lt;p&gt;Java uses Stack memory is used for execution of a thread. Stack contain method specific values that are short-lived and references to other objects in the heap that are getting referred from the method. Whenever a method is invoked, a new block is created in the stack memory for the method to hold local primitive values and reference to other objects in the method. As soon as method ends, the block becomes unused and become available for next method.
Stack memory size is very less compared to Heap memory. Stack memory is short-lived whereas heap memory lives from the start till the end of application execution.&lt;/p&gt;

&lt;p&gt;You can have only values of primitive types (&lt;code&gt;int&lt;/code&gt;, not an &lt;code&gt;Integer&lt;/code&gt;) in a stack. So, you&amp;rsquo;ll may need to specially convert the data.&lt;/p&gt;

&lt;h3 id=&#34;3-use-char-arrays-instead-of-strings-where-possible-and-wipe-zero-data-after-use&#34;&gt;3. Use char arrays instead of Strings where possible and wipe (zero) data after use&lt;/h3&gt;

&lt;p&gt;Consider following class:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;   class CreditCard {
      String cardNumber;
      String cvv2;
   }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can&amp;rsquo;t control how java handles the Strings containing card number and cvv2. If the particular string value is used frequently, JVM may decide to do a &lt;em&gt;string deduplication&lt;/em&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;String de-duplication reduces the memory footprint of String objects on the Java heap by taking advantage of the fact that many String objects are identical.
Instead of each String object pointing to its own character array, identical String objects can point to and share the same character array.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Consider using following code to control the values explicitly:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;class CreditCard {
    private char[] cardNumber;
    private char[] cvv2;
    ...

    public void wipe() {
        if (cardNumber != null) {
            Arrays.fill(cardNumber, &#39;x&#39;);
        };
        cardNumber = null;
        if (cvv2 != null) {
            Arrays.fill(cvv2, &#39;x&#39;);
        }
        cvv2 = null;            
    }

    @Override
    protected void finalize() throws Throwable {
        wipe();
        super.finalize();
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now you can wipe the data when you no longer need it.
Please note that even if you&amp;rsquo;ll call a method &lt;code&gt;finalize()&lt;/code&gt; explicitly, JVM &lt;a href=&#34;http://stackoverflow.com/a/28906/3315474&#34; target=&#34;_blank&#34;&gt;will call it again&lt;/a&gt;. There is no guarantee when finalize will be called by java GC or will it be called at all.&lt;br /&gt;
So, it&amp;rsquo;s better to call &lt;code&gt;wipe()&lt;/code&gt; explicitly somewhere in the &lt;code&gt;finally&lt;/code&gt; block.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;UPD: You may wipe a data in a String using Java Reflection (Peter Verhas&amp;rsquo;s solution)&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public static void wipeString(String password) {
    try {
        Field stringValue = String.class.getDeclaredField(&amp;quot;value&amp;quot;);
        stringValue.setAccessible(true);
        Arrays.fill((char[]) stringValue.get(password), &#39;*&#39;);
    } catch (NoSuchFieldException | IllegalAccessException e) {
        throw new Error(&amp;quot;Can&#39;t wipe string data&amp;quot;);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Following method replaces the content of internal &lt;code&gt;java.lang.String&#39;s&lt;/code&gt; char array field &lt;code&gt;value&lt;/code&gt; with &amp;lsquo;*&amp;rsquo; symbol.
You should call this method explicitly.&lt;/p&gt;

&lt;h3 id=&#34;4-encrypt-data-in-the-heap&#34;&gt;4. Encrypt data in the heap&lt;/h3&gt;

&lt;p&gt;Even if you keep sensitive data in a Heap, you can make reading and analyzing more difficult by using any encription. The encryption should be fast enough and not necessary be very strong since the risk is low.&lt;/p&gt;

&lt;p&gt;One possible solution is to encrypt sensitive data with a key, generated once per JVM run (e.g. function of system time). When you&amp;rsquo;ll need a decrypted data, use special function to decrypt it. It should be fast enough.
For example, you may use &lt;a href=&#34;https://en.wikipedia.org/wiki/Blowfish_%28cipher%29&#34; target=&#34;_blank&#34;&gt;Blowfish&lt;/a&gt;&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:algorithm-performance-comparison-encryption-perf&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:algorithm-performance-comparison-encryption-perf&#34;&gt;0&lt;/a&gt;&lt;/sup&gt; or even simple &lt;a href=&#34;https://en.wikipedia.org/wiki/XOR_cipher&#34; target=&#34;_blank&#34;&gt;XOR&lt;/a&gt; cipher:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;static final int key = (int)(System.currentTimeMillis() + System.nanoTime());
....
int b = a ^ key;
int c = b ^ key;
assert (c == a);
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;Blowfish is fast symmetric cipher but &lt;a href=&#34;https://en.wikipedia.org/wiki/Blowfish_(cipher)#Weakness_and_successors&#34; target=&#34;_blank&#34;&gt;not perfect&lt;/a&gt;. In particular, it is vulnerable to &lt;a href=&#34;https://en.wikipedia.org/wiki/Birthday_attack&#34; target=&#34;_blank&#34;&gt;birthday attack&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;5-prevent-data-duplication&#34;&gt;5. Prevent data duplication&lt;/h3&gt;

&lt;p&gt;Make your class not-cloneable, non-serializable and non-deserializable. Thus you will protect your data from unexpected / unauthorized duplication.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;class CreditCard {
	...

    public final void clone() throws java.lang.CloneNotSupportedException {
		throw new java.lang.CloneNotSupportedException();
    }

    private final void readObject(ObjectInputStream in) throws java.io.IOException {
        throw new java.io.IOException(&amp;quot;Class cannot be deserialized&amp;quot;);
    }

    private final void writeObject(ObjectOutputStream out) throws java.io.IOException {
            throw new java.io.IOException(&amp;quot;Object cannot be serialized&amp;quot;);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;6-prevent-logging-of-sensitive-data&#34;&gt;6. Prevent Logging of Sensitive Data&lt;/h3&gt;

&lt;p&gt;Secure data may leak to the logs if &lt;code&gt;toString()&lt;/code&gt; method is implemented incorrectly.
E.g. using &lt;a href=&#34;https://commons.apache.org/proper/commons-lang/javadocs/api-3.1/org/apache/commons/lang3/builder/ToStringBuilder.html#reflectionToString(java.lang.Object)&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;ToStringBuilder.reflectionToString(...)&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Log files should not contain any sensitive data. It may eventually become accessible to unauthorized persons. You may read about securing your logs with logback in &lt;a href=&#34;../../2015/07/26/secure-java-logging-with-logback/&#34; title=&#34;Secure Java Logging with Logback&#34;&gt;my previous post&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;heapdump-prevention-a5&#34;&gt;Heapdump Prevention (A5)&lt;/h2&gt;

&lt;p&gt;It is possible to take a snapshot of the memory for further analysis and extracting confidential information.&lt;/p&gt;

&lt;p&gt;First of all, &lt;strong&gt;don&amp;rsquo;t run your application on Windows&lt;/strong&gt;. Windows is far more vulnerable to the threats than Linux/Unix.&lt;/p&gt;

&lt;p&gt;There are several ways to mitigate that risk by disabling some JVM heapdump features:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Make sure that java attach mechanism is disabled: &lt;code&gt;-XX:+DisableAttachMechanism&lt;/code&gt;. Enables the option that disables the mechanism that lets tools attach to the JVM. By default, this option is disabled, meaning that the attach mechanism is enabled and you can use tools such as &lt;code&gt;jcmd&lt;/code&gt;, &lt;code&gt;jstack&lt;/code&gt;, &lt;code&gt;jmap&lt;/code&gt;, and &lt;code&gt;jinfo&lt;/code&gt;. See &lt;a href=&#34;http://docs.oracle.com/javase/8/docs/technotes/tools/unix/java.html&#34; target=&#34;_blank&#34;&gt;java command line options&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Disable heapdump on &lt;code&gt;OutOfMemoryError&lt;/code&gt;: &lt;code&gt;-XX:-HeapDumpOnOutOfMemoryError&lt;/code&gt;. Set heapdump file location to &lt;code&gt;/dev/null&lt;/code&gt; to avoid saving heapdump: &lt;code&gt;XX:HeapDumpPath=/dev/null&lt;/code&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Making a heapdump on OOM is not a good idea on production environment. If heap is big enough (a Gigabites) it could take long time to save heap contents to disk. So I suggest using it for load testing only&lt;/p&gt;
&lt;/blockquote&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;check-your-dependencies-for-known-vulnerabilities-a9-a9&#34;&gt;Check Your dependencies for known Vulnerabilities (&lt;a href=&#34;https://www.owasp.org/index.php/Top_10_2013-A9-Using_Components_with_Known_Vulnerabilities&#34; target=&#34;_blank&#34;&gt;A9&lt;/a&gt;)&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Check &lt;a href=&#34;http://cve.mitre.org/&#34; target=&#34;_blank&#34;&gt; MITRE Common Vulnerabilities and Exposures Database&lt;/a&gt; regularly.&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Integrate &lt;a href=&#34;https://www.owasp.org/index.php/OWASP_Dependency_Check&#34; target=&#34;_blank&#34;&gt;OWASP Dependency Check tool&lt;/a&gt; into your CI pipeline. Run it daily.
There is a &lt;a href=&#34;http://jeremylong.github.io/DependencyCheck/dependency-check-maven/&#34; target=&#34;_blank&#34;&gt;maven plugin&lt;/a&gt; which can analyze your project dependencies for known vulnerabilities.
You may consider adding following profile to your &lt;em&gt;pom.xml&lt;/em&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;...
&amp;lt;profiles&amp;gt;
    ...
    &amp;lt;profile&amp;gt;
        &amp;lt;id&amp;gt;security-check&amp;lt;/id&amp;gt;
        &amp;lt;build&amp;gt;
            &amp;lt;plugins&amp;gt;
                &amp;lt;plugin&amp;gt;
                    &amp;lt;groupId&amp;gt;org.owasp&amp;lt;/groupId&amp;gt;
                    &amp;lt;artifactId&amp;gt;dependency-check-maven&amp;lt;/artifactId&amp;gt;
                    &amp;lt;version&amp;gt;1.4.3&amp;lt;/version&amp;gt;
                    &amp;lt;executions&amp;gt;
                        &amp;lt;execution&amp;gt;
                            &amp;lt;goals&amp;gt;
                                &amp;lt;goal&amp;gt;check&amp;lt;/goal&amp;gt;
                            &amp;lt;/goals&amp;gt;
                            &amp;lt;phase&amp;gt;validate&amp;lt;/phase&amp;gt;
                        &amp;lt;/execution&amp;gt;
                    &amp;lt;/executions&amp;gt;
                &amp;lt;/plugin&amp;gt;
            &amp;lt;/plugins&amp;gt;
        &amp;lt;/build&amp;gt;
    &amp;lt;/profile&amp;gt;
    ...
&amp;lt;/profiles&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;The list is not comprehensive, comments and suggestions are always welcome.&lt;/p&gt;

&lt;h2 id=&#34;references&#34;&gt;References&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.owasp.org/index.php/Top_10_2013-Table_of_Contents&#34; title=&#34;OWASP Top 10&#34; target=&#34;_blank&#34;&gt;OWASP Top 10&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;(http://docs.oracle.com/javase/8/docs/technotes/tools/unix/java.html).&#34; target=&#34;_blank&#34;&gt;Java JM Command Line Options&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.journaldev.com/4098/java-heap-memory-vs-stack-memory-difference&#34; target=&#34;_blank&#34;&gt;Java Heap Memory vs Stack Memory Difference&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.javaworld.com/article/2076837/mobile-java/twelve-rules-for-developing-more-secure-java-code.html&#34; title=&#34;Twelve rules for developing more secure Java code&#34; target=&#34;_blank&#34;&gt;Twelve rules for developing more secure Java code&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.cs.wustl.edu/~jain/cse567-06/ftp/encryption_perf/&#34; title=&#34;Performance Analysis of Data Encryption Algorithms&#34; target=&#34;_blank&#34;&gt;Performance Analysis of Data Encryption Algorithms&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.owasp.org/index.php/Category:OWASP_Enterprise_Security_API&#34; target=&#34;_blank&#34;&gt;OWASP Enterprise Security API&lt;/a&gt; / &lt;a href=&#34;https://github.com/ESAPI/esapi-java-legacy&#34; target=&#34;_blank&#34;&gt;ESAPI 2.x on GitHub&lt;/a&gt; &amp;ndash; ESAPI (The OWASP Enterprise Security API) is a free, open source, web application security control library that makes it easier for programmers to write lower-risk applications. The ESAPI libraries are designed to make it easier for programmers to retrofit security into existing applications. The ESAPI libraries also serve as a solid foundation for new development.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/jeremylong/DependencyCheck&#34; target=&#34;_blank&#34;&gt;Dependency-Check: checking project dependencies&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://speakerdeck.com/drissamri/web-app-security-owasp-top-10-2013&#34; target=&#34;_blank&#34;&gt;Web App Security - OWASP Top 10 2013&lt;/a&gt; by Driss Amri&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://mishadoff.com/blog/java-magic-part-4-sun-dot-misc-dot-unsafe/&#34; target=&#34;_blank&#34;&gt;Java Magic. Part 4: sun.misc.Unsafe&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Secure Java Logging with Logback</title>
      <link>https://konstantinpavlov.net/blog/2015/07/26/secure-java-logging-with-logback/</link>
      <pubDate>Sun, 26 Jul 2015 14:01:33 +0000</pubDate>
      
      <guid>https://konstantinpavlov.net/blog/2015/07/26/secure-java-logging-with-logback/</guid>
      <description>

&lt;p&gt;Deploying application into secure environment adds some restrictions on logging and log management. &lt;a href=&#34;https://www.owasp.org&#34; target=&#34;_blank&#34;&gt;OWASP community&lt;/a&gt; gives some useful recommendations.&lt;/p&gt;

&lt;h1 id=&#34;owasp-security-testing-guide-recommendations&#34;&gt;OWASP Security Testing Guide Recommendations&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;https://www.owasp.org/images/5/52/OWASP_Testing_Guide_v4.pdf&#34; target=&#34;_blank&#34;&gt;OWASP Security Testing Guide&lt;/a&gt; defines a number of questions to be answered when reviewing applciaiton logging configuration (see &lt;a href=&#34;https://www.owasp.org/images/5/52/OWASP_Testing_Guide_v4.pdf&#34; target=&#34;_blank&#34;&gt;OTG-CONFIG-002&lt;/a&gt;):&lt;/p&gt;

&lt;h2 id=&#34;1-do-the-logs-contain-sensitive-information&#34;&gt;1. Do the logs contain sensitive information?&lt;/h2&gt;

&lt;p&gt;Log files should not contain any sensitive data. Anyway, log file access must be restricted:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Event log information should never be visible to end users. Even web administrators should not be able to see such logs since it breaks
separation of duty controls. Ensure that any access control schema that is used to protect access to raw logs and any applications providing capabilities to view or search the logs is not linked with access control schemas for other application user roles. Neither should any
log data be viewable by unauthenticated users.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The consequence is that you should not use same authentication mechanism to access application and accessing the log files.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Also, in some jurisdictions, storing some sensitive information in log files, such as personal data, might oblige the enterprise to apply the data protection laws that they would apply to their back-end databases to log files too. And failure to do so, even unknowingly, might
carry penalties under the data protection laws that apply.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;It&amp;rsquo;s not easy to make sure that no sensitive information is not printed to log. When using &lt;a href=&#34;http://logback.qos.ch/&#34; target=&#34;_blank&#34;&gt;logback&lt;/a&gt; it is possible to conigure &lt;a href=&#34;http://logback.qos.ch/manual/layouts.html#replace&#34; target=&#34;_blank&#34;&gt;regexp replace pattern&lt;/a&gt; to wipe certain data from log files being written, e.g. &lt;a href=&#34;http://stackoverflow.com/a/4624952/3315474&#34; target=&#34;_blank&#34;&gt;mask passwords&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To mask credit card number (PAN) you may use the following expression (&lt;code&gt;logback.xml&lt;/code&gt;):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;pattern&amp;gt;%-5level - %replace(%msg){&#39;\d{12,19}&#39;, &#39;XXXX&#39;}%n&amp;lt;/pattern&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This expression will replace all numbers with 12 to 19 digits with &lt;code&gt;XXXX&lt;/code&gt;, so some other data will be masked.&lt;/p&gt;

&lt;p&gt;Another pattern variation honors only 16-digit card numbers (PANs) with selective &lt;a href=&#34;https://en.wikipedia.org/wiki/Bank_card_number#Issuer_identification_number_.28IIN.29&#34; target=&#34;_blank&#34;&gt;first digit&lt;/a&gt; and supports spaces between digit groups:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;pattern&amp;gt;%-5level - %replace(%msg){&#39;[1-6][0-9]{3}[\s-]?[0-9]{4}[\s-]?[0-9]{4}[\s-]?[0-9]{4}|5[1-5][0-9]{2}[\s-]?[0-9]{4}[\s-]?[0-9]{4}[\s-]?[0-9]{4}&#39;, &#39;XXXX&#39;}%n&amp;lt;/pattern&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Masking PANs with Logback is the last resort to ensure the data is masked with a false-positive hits. It is preferrable to mask the data before it is being written to log in the applciation code.&lt;/p&gt;

&lt;p&gt;You may read about securing coding practices in &lt;a href=&#34;../../2015/08/01/secure-java-coding-best-practices/&#34; title=&#34;Secure Java Coding Best Practices&#34;&gt;my next post&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;2-are-the-logs-stored-in-a-dedicated-server&#34;&gt;2. Are the logs stored in a dedicated server?&lt;/h2&gt;

&lt;p&gt;It is advised to keep log files on the separate server to prevent removing/cleaning log files by attacker and to ease of centralized log file analysis.&lt;/p&gt;

&lt;p&gt;Logback offers &lt;a href=&#34;http://logback.qos.ch/manual/appenders.html#SocketAppender&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;SocketAppender&lt;/code&gt;&lt;/a&gt; with &lt;code&gt;SimpleSocketServer&lt;/code&gt; and &lt;a href=&#34;http://logback.qos.ch/manual/usingSSL.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;SSLSocketAppender&lt;/code&gt;&lt;/a&gt; with &lt;code&gt;SimpleSSLSocketServer&lt;/code&gt; for logging on a remote server instance.&lt;/p&gt;

&lt;p&gt;Second option is &lt;a href=&#34;http://logback.qos.ch/manual/appenders.html#DBAppender&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;DBAppender&lt;/code&gt;&lt;/a&gt; to write logs to the database thus keeping them apart from application instance.&lt;/p&gt;

&lt;p&gt;Other option is to use &lt;a href=&#34;http://logback.qos.ch/manual/appenders.html#SyslogAppender&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;SyslogAppender&lt;/code&gt;&lt;/a&gt; and delegate logging to system syslog service. But is is not secure enougth: in the system will be hacked, the hacker may re-configure syslog not to send any events to remote log server.&lt;/p&gt;

&lt;p&gt;When using a &lt;a href=&#34;http://logstash.net/&#34; target=&#34;_blank&#34;&gt;Logstash&lt;/a&gt; server, you may send events via &lt;a href=&#34;https://github.com/logstash/logstash-logback-encoder&#34; target=&#34;_blank&#34;&gt;Logstash Logback Encoder&lt;/a&gt;. Thare are &lt;a href=&#34;https://github.com/logstash/logstash-logback-encoder#usage&#34; target=&#34;_blank&#34;&gt;handful of appenders&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Also, ypu may consider using &lt;a href=&#34;http://audit.qos.ch/&#34; target=&#34;_blank&#34;&gt;logback-audit&lt;/a&gt; which provides logging vis dedicated log server or directly to the database.&lt;/p&gt;

&lt;h2 id=&#34;3-can-log-usage-generate-a-denial-of-service-condition&#34;&gt;3. Can log usage generate a Denial of Service condition?&lt;/h2&gt;

&lt;p&gt;In case of exceptions on production due to invalid data provided in the request, the exceptions may be printed to logs and cause high IO consumption. This may lead to server unavailability.&lt;/p&gt;

&lt;h3 id=&#34;log-asynchronously&#34;&gt;Log Asynchronously&lt;/h3&gt;

&lt;p&gt;Logback offers some kind of protection against log overhead.
First is using &lt;a href=&#34;http://logback.qos.ch/manual/appenders.html#AsyncAppender&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;AsyncAppender&lt;/code&gt;&lt;/a&gt; to queue log events and spread the load. Set &lt;a href=&#34;http://logback.qos.ch/manual/appenders.html#asyncQueueSize&#34; target=&#34;_blank&#34;&gt;queueSize&lt;/a&gt; wisely. Default value is 256 which is not enougth.&lt;/p&gt;

&lt;p&gt;If you&amp;rsquo;re fine with loosing some less important details then use &lt;code&gt;AsyncAppender&lt;/code&gt; with &lt;a href=&#34;http://logback.qos.ch/manual/appenders.html#asyncDiscardingThreshold&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;discardingThreshold&lt;/code&gt;&lt;/a&gt;. Uf the event queue has only 20% capacity remaining, events with fine-grained logging category will be dropped.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://logstash.net/&#34; target=&#34;_blank&#34;&gt;Logstash&lt;/a&gt; provides the &lt;a href=&#34;https://github.com/logstash/logstash-logback-encoder/blob/master/src/main/java/net/logstash/logback/appender/LoggingEventAsyncDisruptorAppender.java&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;AsyncDisruptorAppender&lt;/code&gt;&lt;/a&gt; from the which is similar to logback&amp;rsquo;s &lt;code&gt;AsyncAppender&lt;/code&gt;, except that a &lt;a href=&#34;https://github.com/LMAX-Exchange/disruptor&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;LMAX Disruptors&lt;/code&gt;&lt;/a&gt; &lt;code&gt;RingBuffer&lt;/code&gt; is used as the queuing mechanism, as opposed to a &lt;code&gt;BlockingQueue&lt;/code&gt; providing higher throughput and less GC overhead. These async appenders can delegate to any other underlying logback appender, including standard Logback file appenders. Set LMAX RingBuffer size wizely. Too low values may cause the the blocking of entire application.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Think twice before enabling Async Logging!&lt;/strong&gt; As far as ensuring that a message has been successfully written before the app continues is concerned, you should not log asynchronously.&lt;/p&gt;

&lt;h3 id=&#34;use-appropriate-logging-levels&#34;&gt;Use Appropriate Logging Levels&lt;/h3&gt;

&lt;p&gt;Specifying inappropriate log levels in application and appenders may cause excessive load on production server.
You&amp;rsquo;re not going to debug on production, right? Then why you are print valuable data with &lt;code&gt;DEBUG&lt;/code&gt; level?
On production configuration, default appender&amp;rsquo;s logging level shoud be &lt;strong&gt;INFO&lt;/strong&gt;.
If you always need some information - use &lt;strong&gt;INFO&lt;/strong&gt; level in the application and use the database to save data like raw requests.
Debugging should be enabled on produciton only in critical situations.&lt;/p&gt;

&lt;h2 id=&#34;4-how-are-the-log-files-rotated-are-logs-kept-for-the-sufficient-time&#34;&gt;4. How are the log files rotated? Are logs kept for the sufficient time?&lt;/h2&gt;

&lt;p&gt;Log files should be rotated at least daily. Reasonable log history depth is 6 months. Some regulations may require to keep log files longer in case of investigations.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Some servers might rotate logs when they reach a given size. If this
happens, it must be ensured that an attacker cannot force logs to rotate in order to hide his tracks.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;5-how-are-logs-reviewed-can-administrators-use-these-reviews-to-detect-targeted-attacks&#34;&gt;5. How are logs reviewed? Can administrators use these reviews to detect targeted attacks?&lt;/h2&gt;

&lt;p&gt;Log files can be used for attac detection. For example, the first phases of a SQL injection attack may producte 50x (server errors) or 40x (request errors) messages.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Log statistics or analysis should not be generated, nor stored, in the same server that produces the logs. Otherwise, an attacker might, through a web server vulnerability or improper configuration, gain access to them and retrieve similar information as would be disclosed by
log files themselves.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;6-how-are-log-backups-preserved&#34;&gt;6. How are log backups preserved?&lt;/h2&gt;

&lt;h3 id=&#34;make-log-files-append-only&#34;&gt;Make Log Files Append-only&lt;/h3&gt;

&lt;p&gt;Other type of attack is modification logging configuration file in order to hide the fact of attack.
Use &lt;a href=&#34;https://en.wikipedia.org/wiki/Mandatory_access_control&#34; target=&#34;_blank&#34;&gt;Mandatory Access Controls&lt;/a&gt; on the log file to make it append-only to users of the app, to mitigate the possibility of tampering or removing existing messages.&lt;/p&gt;

&lt;p&gt;The simplest way to make files append-only is probably &lt;a href=&#34;http://unix.stackexchange.com/a/59983&#34; target=&#34;_blank&#34;&gt;this&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo chattr +a *.log
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;or&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo chattr +a *.log
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Also don&amp;rsquo;t forget to &lt;a href=&#34;http://unix.stackexchange.com/a/1315/125877&#34; target=&#34;_blank&#34;&gt;set default file attributes&lt;/a&gt; for log directory&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# owner make the owner to be root and java group
sudo chown root:java /var/log/java
# set uid and gid   
sudo chmod ug+s /var/log/java  
# set group to w default
sudo setfacl -d -m g::w /var/log/java  
# set nothing to other
sudo setfacl -d -m o::--- /var/log/java
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;make-backups&#34;&gt;Make Backups&lt;/h3&gt;

&lt;p&gt;You need to backup the logs, defenitely, as well as other applicaiton data.&lt;/p&gt;

&lt;p&gt;You could additionally take periodic backups of the log file to ensure that nothing has been changed or removed between backups. This assumes that access to your backups is also controlled &amp;ndash; a third party who can tamper with your backups can tamper with your log files in an undetectable fashion.&lt;/p&gt;

&lt;h2 id=&#34;7-is-the-data-being-logged-data-validated-min-max-length-chars-etc-prior-to-being-logged&#34;&gt;7. Is the data being logged data validated (min/max length, chars etc) prior to being logged?&lt;/h2&gt;

&lt;p&gt;Be carefull what are you writting to logs. Always ask yourself: &lt;em&gt;&amp;laquo;Is it possible to produce big or huge logging output?&amp;raquo;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Be carefull when &lt;a href=&#34;http://www.slideshare.net/KonstantinPavlov/playing-the-tostrings&#34; target=&#34;_blank&#34;&gt;implementing the method &lt;code&gt;toString()&lt;/code&gt;&lt;/a&gt;.
Include only minimum necessary information &lt;code&gt;in toString()&lt;/code&gt; method.&lt;/p&gt;

&lt;h1 id=&#34;further-steps-protect-your-logging-configuration&#34;&gt;Further steps: Protect your logging configuration&lt;/h1&gt;

&lt;p&gt;Logback configuration can be included inside application (jar file) or be located in external file (&lt;code&gt;logback.xml&lt;/code&gt;). Hacker may try to modify or remove &lt;code&gt;logback.xml&lt;/code&gt;.
In order to prevent this attack, &lt;code&gt;logback.xml&lt;/code&gt; should be:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Can not be modified by application user.&lt;/li&gt;
&lt;li&gt;Monitored by intrusion detection system.&lt;/li&gt;
&lt;li&gt;Logback auto-reload feature must not be enabled to prevent replacing configuration of the running java applicaiton.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Although auto-reload is very attractive feature of logback, it is reasonable to sacrifice it in favor of security.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Implementing Automatic Reconnection for Netty Client</title>
      <link>https://konstantinpavlov.net/blog/2015/07/08/implementing-automatic-reconnection-for-netty-client/</link>
      <pubDate>Wed, 08 Jul 2015 07:48:05 +0000</pubDate>
      
      <guid>https://konstantinpavlov.net/blog/2015/07/08/implementing-automatic-reconnection-for-netty-client/</guid>
      <description>&lt;p&gt;One of the first requirement of &lt;a href=&#34;https://github.com/kpavlov/jreactive-8583&#34; target=&#34;_blank&#34;&gt;Netty ISO8588 client connector&lt;/a&gt; was the support for automatic reconnect.&lt;/p&gt;

&lt;p&gt;One of the first receipts I came across was &lt;a href=&#34;http://tterm.blogspot.com/2014/03/netty-tcp-client-with-reconnect-handling.html&#34; target=&#34;_blank&#34;&gt;Thomas Termin&amp;rsquo;s one&lt;/a&gt;. He suggests adding a ChannelHandler which will schedule the calling of client&amp;rsquo;s &lt;code&gt;connect()&lt;/code&gt; method once a Channel becomes inactive. Plus adding ChannelFutureListener which will re-create a bootstrap and re-connect if initial connection was failed.&lt;/p&gt;

&lt;p&gt;Although this is a working solution, I had a feeling that something is not optimal. Namely, the new Bootstrap is being created on every connection attempt.&lt;/p&gt;

&lt;p&gt;So, I created a FutureListener which should be registered once a Channel is closed.&lt;/p&gt;

&lt;p&gt;Here is the &lt;a href=&#34;https://github.com/kpavlov/jreactive-8583/blob/master/src/main/java/org/jreactive/iso8583/netty/pipeline/ReconnectOnCloseListener.java&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;ReconnectOnCloseListener&lt;/code&gt;&lt;/a&gt; code:&lt;/p&gt;

&lt;p&gt;```java ReconnectOnCloseListener.java
    public class ReconnectOnCloseListener implements ChannelFutureListener {&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    private final Logger logger = getLogger(ReconnectOnCloseListener.class);

    private final Iso8583Client client;
    private final int reconnectInterval;
    private final AtomicBoolean disconnectRequested = new AtomicBoolean(false);
    private final ScheduledExecutorService executorService;

    public ReconnectOnCloseListener(Iso8583Client client, int reconnectInterval, ScheduledExecutorService executorService) {
        this.client = client;
        this.reconnectInterval = reconnectInterval;
        this.executorService = executorService;
    }

    public void requestReconnect() {
        disconnectRequested.set(false);
    }

    public void requestDisconnect() {
        disconnectRequested.set(true);
    }

    @Override
    public void operationComplete(ChannelFuture future) throws Exception {
        final Channel channel = future.channel();
        logger.debug(&amp;quot;Client connection was closed to {}&amp;quot;, channel.remoteAddress());
        channel.disconnect();
        scheduleReconnect();
    }

    public void scheduleReconnect() {
        if (!disconnectRequested.get()) {
            logger.trace(&amp;quot;Failed to connect. Will try again in {} millis&amp;quot;, reconnectInterval);
            executorService.schedule(
                    client::connectAsync,
                    reconnectInterval, TimeUnit.MILLISECONDS);
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;
To establish the connection I use the following [code][Iso8583Client]:

```java
    reconnectOnCloseListener.requestReconnect();
    final ChannelFuture connectFuture = bootstrap.connect();
    connectFuture.addListener(connFuture -&amp;gt; {
        if (!connectFuture.isSuccess()) {
            reconnectOnCloseListener.scheduleReconnect();
            return;
        }
        Channel channel = connectFuture.channel();
        logger.info(&amp;quot;Client is connected to {}&amp;quot;, channel.remoteAddress());
        setChannel(channel);
        channel.closeFuture().addListener(reconnectOnCloseListener);
    });
    connectFuture.sync();// if you need to connect synchronously
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When you want to disconnect, you&amp;rsquo;ll need to disable automatic reconnection first:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;    reconnectOnCloseListener.requestDisconnect();
    channel.close();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The solution works fine so far (&lt;a href=&#34;https://github.com/kpavlov/jreactive-8583/blob/master/src/test/java/org/jreactive/iso8583/example/ClientReconnectIT.java&#34; target=&#34;_blank&#34;&gt;integration test&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;Another option is to add a ChannelOutboundHandler which will handle disconnects.&lt;/p&gt;

&lt;h3 id=&#34;links&#34;&gt;Links&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Sources: &lt;a href=&#34;https://github.com/kpavlov/jreactive-8583/blob/master/src/main/java/org/jreactive/iso8583/netty/pipeline/ReconnectOnCloseListener.java&#34; target=&#34;_blank&#34;&gt;ReconnectListener&lt;/a&gt;, &lt;a href=&#34;https://github.com/kpavlov/jreactive-8583/blob/master/src/main/java/org/jreactive/iso8583/client/Iso8583Client.java#L67&#34; target=&#34;_blank&#34;&gt;Client&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;StackOverflow: &lt;a href=&#34;http://stackoverflow.com/a/20881135/3315474&#34; target=&#34;_blank&#34;&gt;answer one&lt;/a&gt;, &lt;a href=&#34;http://stackoverflow.com/a/9351628/3315474&#34; target=&#34;_blank&#34;&gt;answer two&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Java Application Development Tutorial</title>
      <link>https://konstantinpavlov.net/blog/2015/06/17/java-application-development-tutorial/</link>
      <pubDate>Wed, 17 Jun 2015 09:55:16 +0000</pubDate>
      
      <guid>https://konstantinpavlov.net/blog/2015/06/17/java-application-development-tutorial/</guid>
      <description>&lt;p&gt;I&amp;rsquo;ve been meaning to write a small tutorial for building web applications. Now it&amp;rsquo;s time!
Let&amp;rsquo;s define the steps and choose some solutions for developing back-end java web application.&lt;/p&gt;

&lt;p&gt;I will give my design recommendations and list a technologies I would use. You may have your own opinion and you may share it in comment. Over time, this post may change since my favourites are also changing over time.&lt;/p&gt;

&lt;h2 id=&#34;technologies-stack&#34;&gt;Technologies Stack&lt;/h2&gt;

&lt;h3 id=&#34;server-side-stack&#34;&gt;Server-Side Stack&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Use latest stable JDK. Now it is Java 8.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Use lightweight web container, e.g. Jetty or Tomcat.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Use Spring stack instead of J2EE. It is more customizable and extensible. &lt;a href=&#34;http://projects.spring.io/spring-boot/&#34; target=&#34;_blank&#34;&gt;Spring Boot&lt;/a&gt; is a default choice.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Use embedded web server if possible. &lt;a href=&#34;https://spring.io/guides/gs/spring-boot/&#34; target=&#34;_blank&#34;&gt;Spring Boot Maven Plugin&lt;/a&gt; allows you easily repackage all your jars into single jar or war file.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Package your application as self-executing JARs instead of WARs and run them with &lt;code&gt;./app.jar&lt;/code&gt;. Thus you will never depend on application server infrastructure managed by IT team. Manage your infrastructure yourself!&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Use Spring Boot - it offers convention over configuration and many predefined &lt;code&gt;@Configuration&lt;/code&gt;s.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Prefer Java-based Spring Configurations over XML-based. Java offers more restrictive type checking and visibility control.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Use Spring Transaction Management (spring-tx) with &lt;code&gt;@Transactional&lt;/code&gt;. Don&amp;rsquo;t set &lt;code&gt;autoCommit=&amp;quot;true&amp;quot;&lt;/code&gt;. It is more flexible.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Prefer &lt;a href=&#34;http://wiki.fasterxml.com/JacksonHome&#34; target=&#34;_blank&#34;&gt;Jackson&lt;/a&gt; with &lt;a href=&#34;https://github.com/FasterXML/jackson-dataformat-xml&#34; title=&#34;Extension for Jackson JSON processor that adds support for serializing POJOs as XML&#34; target=&#34;_blank&#34;&gt;Jackson XML&lt;/a&gt; + &lt;a href=&#34;http://wiki.fasterxml.com/WoodstoxHome&#34; target=&#34;_blank&#34;&gt;Woodstox&lt;/a&gt; over JAXB, it&amp;rsquo;s faster and more convenient. jackson-dataformat-xml offers support for JAXB annotations but you are not forced to use JAXB for marshalling.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Use mocks (Mockito) and spring-test for unit testing. Prefer singletons over statics and you&amp;rsquo;ll not need a PowerMockito.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Use maven. I don&amp;rsquo;t see any significant advantage of using Gradle in terms of performance. Project should be simple in structure and fast to build, so maven is still performs well.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;front-end-stack&#34;&gt;Front-End Stack&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Use &lt;strong&gt;professional&lt;/strong&gt; front-end frameworks and tools like React, AngularJS, SASS, Npm and Gulp. You&amp;rsquo;re developing a high quality product and you should use proven solutions for front-end. Professional front-end developers do use this tools so you should not &lt;a href=&#34;https://en.wikipedia.org/wiki/Don%27t_repeat_yourself&#34; title=&#34;Don&#39;t repeat yourself&#34; target=&#34;_blank&#34;&gt;re-invent the wheel&lt;/a&gt;.
&lt;a href=&#34;//www.webjars.org&#34; target=&#34;_blank&#34;&gt;WebJars&lt;/a&gt; is also a good solution if your application is simple enough.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Design your JS application to consume REST API&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Design your server to be expose REST API.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;design-order&#34;&gt;Design Order&lt;/h2&gt;

&lt;p&gt;Start from presentation layer and go down on the controllers and services layers.&lt;/p&gt;

&lt;p&gt;Avoid starting with database schema design unless you know your business domain in depth.
Your interface (web or api) will dictate required data structure, so persistence layer interfaces will evolve in the future. You may minimize changes by introducing API level in the database, i.e. use views and stored procedures to fix the contract between DBMS and application.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;It&amp;rsquo;s IMPORTANT: Delay making of important architectural solutions as much as possible!&lt;/strong&gt;
Making decision earlier may catch you in a trap of technologies and tools not suited well for solving your problem. But that knowledge came to yo too late. Typical example: you may have chosen RDBMS but now, when a project is nearly completed, NoSql storage seems to be better fit for your problem.&lt;/p&gt;

&lt;h2 id=&#34;building-front-end&#34;&gt;Building Front-End&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Start with UI without real data. Then create a test data (JSON files) and use simple nodejs http server to serve it together with other assets. When your data requirements are defined, start implementing service API. This approach saves a lot of time: You don&amp;rsquo;t have to change both server and client when design has eventually changed.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Create separate controllers for creating and amending your entities. Data models and validation rules are often different. Most likely you will have significantly different models. Also, edit controllers will be simpler if you&amp;rsquo;ll have less mutable fields in the model.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;building-server-side&#34;&gt;Building Server-Side&lt;/h2&gt;

&lt;h3 id=&#34;presentation-layer&#34;&gt;Presentation Layer&lt;/h3&gt;

&lt;h4 id=&#34;web-views-templates&#34;&gt;Web Views (Templates)&lt;/h4&gt;

&lt;p&gt;This sub-layer includes web templates. Responsible for rendering of View Models.&lt;/p&gt;

&lt;p&gt;There are a number of java template engines. Most notable of them are &lt;a href=&#34;http://www.thymeleaf.org/&#34; target=&#34;_blank&#34;&gt;Thymeleaf&lt;/a&gt; and &lt;a href=&#34;http://freemarker.org/&#34; target=&#34;_blank&#34;&gt;Freemarker&lt;/a&gt;.
Thymeleaf offers designing the templates as pure html and then make them work as a template when deployed to web server. Use it if you want your designers to own the templates.
Freemarker is about three times faster than Thymeleaf but it may not be possible to open the template in a browser.&lt;/p&gt;

&lt;p&gt;You may like to see the &lt;a href=&#34;http://www.slideshare.net/jreijn/comparing-templateenginesjvm&#34; target=&#34;_blank&#34;&gt;presentation&lt;/a&gt; by Jeroen Reijn on JVM template engines with performance comparison.&lt;/p&gt;

&lt;p&gt;I don&amp;rsquo;t recommend using the JSPs because they don&amp;rsquo;t enforce clear logic and view separation. Low-skilled developers tend to write a presentation or even a business logic in a JSP which will inevitably lead into trouble. De-facto, JSP is deprecated technology.&lt;/p&gt;

&lt;p&gt;There are a doubts about unit testing this layer. It often changes and usually is tested manually (visually) by (system) integration tests.&lt;/p&gt;

&lt;h4 id=&#34;presentation-logic&#34;&gt;Presentation Logic&lt;/h4&gt;

&lt;p&gt;This sub-layer includes web Controllers and View Helpers. Responsible for data syntax validation, preparing view model. Can be easily Unit-Tested.&lt;/p&gt;

&lt;p&gt;Typical technology stack for presentation layer contains:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://docs.spring.io/spring/docs/current/spring-framework-reference/html/mvc.html&#34; target=&#34;_blank&#34;&gt;Spring Web MVC&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://projects.spring.io/spring-security/&#34; title=&#34;Spring Security is a powerful and highly customizable authentication and access-control framework.&#34; target=&#34;_blank&#34;&gt;Spring Security Web&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://wiki.fasterxml.com/JacksonHome&#34; target=&#34;_blank&#34;&gt;Jackson&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Please consider following ideas when designing a components for this layer:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Use separate model for presentation layer.&lt;/li&gt;
&lt;li&gt;Use the front-end test data files to test data conversion in server-side controller level. Your tests should fail when you change JSON format of your objects.&lt;/li&gt;
&lt;li&gt;Do only validation and presentation-related business login in this layer. You&amp;rsquo;ll have a Business Logic (Service) Layer for business logic.&lt;/li&gt;
&lt;li&gt;Don&amp;rsquo;t perform security (access control) checks in this layer. Leave it to Service Layer.&lt;/li&gt;
&lt;li&gt;Don&amp;rsquo;t manage the transactions in this layer. Leave it to Service Layer.&lt;/li&gt;
&lt;li&gt;Use javax.validation API and hibernate-validator to annotate DTO beans.&lt;/li&gt;
&lt;li&gt;Don&amp;rsquo;t include any logic into DTO. It&amp;rsquo;s just a POJOs with annotations.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Someone may argue: why not to manage transactions in controllers (presentation layer)? Now imagine you&amp;rsquo;ll need to call the same operation from web UI, rest API and Message Driven Bean. You&amp;rsquo;ll have to add transaction management to each controller and MDB and use Spring &lt;code&gt;TransactionTemplate&lt;/code&gt; instead. Thus you&amp;rsquo;ll end up with copy-pasting business logic to multiple classes and which is not acceptable from the application maintenance point of view. Same is true for security/access control. It should be handled on service layer.&lt;/p&gt;

&lt;h3 id=&#34;business-logic-service-layer&#34;&gt;Business Logic (Service) Layer&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Perform access-control validation in this layer. Same services may be invoked from different controllers (e.g. html and REST ones) so you&amp;rsquo;ll use the same logic.&lt;/li&gt;
&lt;li&gt;Use &lt;code&gt;@Transactional&lt;/code&gt; to annotate service classes and methods. Transactions are aged here. If you need a complex transaction management then use a &lt;code&gt;TransactionTemplate&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Don&amp;rsquo;t access &lt;code&gt;DataSource&lt;/code&gt; or &lt;code&gt;JdbcTemplate&lt;/code&gt; in this layer. Use DAOs instead.&lt;/li&gt;

&lt;li&gt;&lt;p&gt;When you call a &lt;code&gt;@Transactional&lt;/code&gt; method from non-transactional one in the same spring bean use &lt;code&gt;self&lt;/code&gt;-reference:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;@Service
public MyServiceImpl implements MyService {

    @Autowired
    private MyDao dao;

    @Autowired
    private MyServiceImpl self;

    @Override
    public void nonTxMethod() {
        self.txMethod(); // &amp;quot;self&amp;quot; is a proxy with transactional aspect support
    }

    @Override
    @Transactional
    public void txMethod() {
         dao.load(...);
         ...
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;data-access-layer&#34;&gt;Data Access Layer&lt;/h3&gt;

&lt;p&gt;Access data storage such as relational and not relational databases. Usually supports transactions.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Don&amp;rsquo;t manage transactions on this layers. Transactions are managed on Service layer.&lt;/li&gt;
&lt;li&gt;Write integration tests that hit database on this layer. You&amp;rsquo;re usually don&amp;rsquo;t need a lot of unit tests here (hello, &amp;laquo;Test Pyramid&amp;raquo;).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;AbstractTransactionalJUnit4SpringContextTests&lt;/code&gt; is your friend. Extend your integration tests from this class and you&amp;rsquo;ll have a transaction rollback for free.&lt;/li&gt;
&lt;li&gt;Since integration tests may take time, make them run on &lt;code&gt;integration test&lt;/code&gt; maven phase and exclude them from fast unit tests.&lt;/li&gt;
&lt;li&gt;Prepare a test data before executing a test. It will be rolled-back automatically. If you need DB transaction to commit, put &lt;code&gt;@Rollback(false)&lt;/code&gt; annotation.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;integration-layer&#34;&gt;Integration Layer&lt;/h3&gt;

&lt;p&gt;Contains connectors to external systems. Usually non-transactional.&lt;/p&gt;

&lt;p&gt;You may write some unit tests here.&lt;/p&gt;

&lt;h3 id=&#34;messaging-layer&#34;&gt;Messaging Layer&lt;/h3&gt;

&lt;p&gt;In modern event-driven architecture message processing is important for integration point of view. Messaging layer typically includes JavaEE Message Driven Beans or various event listeners. This layer is actually a presentation layer but it operates with message payloads as input/output model objects in contrast of View Models and templates used in web presentation layer. For web presentation layer the payload is html page content, whereas for messaging layer the payload is xml, json, protobuf or any other message format.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>API Authentication: Generating HMAC digest in PHP and Java</title>
      <link>https://konstantinpavlov.net/blog/2015/05/20/api-authentication-generating-hmac-digest-in-php-and-java/</link>
      <pubDate>Wed, 20 May 2015 22:24:47 +0000</pubDate>
      
      <guid>https://konstantinpavlov.net/blog/2015/05/20/api-authentication-generating-hmac-digest-in-php-and-java/</guid>
      <description>&lt;p&gt;User authentication is an important part of the web service API design.
One of the common approach is the Hash-based Message Authentication Code &amp;ndash; &lt;abbr title=&#34;Hash-based Message Authentication Code&#34;&gt;&lt;a href=&#34;http://en.wikipedia.org/wiki/Hash-based_message_authentication_code&#34; title=&#34;Hash-based message authentication code&#34; target=&#34;_blank&#34;&gt;HMAC&lt;/a&gt;&lt;/abbr&gt;.
Used together with transport level security it provides reliable mechanizm of user authentication and message integrity validation.
&lt;/p&gt;

&lt;p&gt;Imagine, we want to create java web service for our customers.
Data encryption will be guaranteed by using https connection with TLS.
We will implement API user authentication by using public &lt;em&gt;API Key ID&lt;/em&gt; and a &lt;em&gt;API Key Secret&lt;/em&gt;.
User should generate an API Key: unique pair of &lt;em&gt;Key ID&lt;/em&gt; and a &lt;em&gt;Key Secret&lt;/em&gt; for his application.
User should send that &lt;em&gt;Key ID&lt;/em&gt;, message payload and a &lt;em&gt;digest&lt;/em&gt; with every request.
Digest is generated by signing all HTTP headers and message payload with &lt;em&gt;Key Secret&lt;/em&gt;.
(see &lt;a href=&#34;http://docs.aws.amazon.com/AmazonS3/latest/dev/RESTAuthentication.html#ConstructingTheCanonicalizedResourceElement&#34; title=&#34;Signing and Authenticating REST Requests by Amazon&#34; target=&#34;_blank&#34;&gt;Amazon&amp;rsquo;s recommendations&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;In PHP there is a function &lt;a href=&#34;http://php.net/manual/en/function.hash-hmac.php&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;hash_hmac&lt;/code&gt;&lt;/a&gt; for generating keyed hash value using the HMAC method. Here is the example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;?php

$keyId = &#39;d36cb306-9341-466f-a794-d49fbc485d8b&#39;;
$payload = &#39;{&amp;quot;command&amp;quot;: &amp;quot;buy&amp;quot;, &amp;quot;amount&amp;quot;:10, currency&amp;quot;:&amp;quot;EURUSD&amp;quot;}&#39;;
$secret = &#39;se1cr2et3w0r4d&#39;;

echo &#39;SHA-512 HMAC Digest: &#39;, hash_hmac(&#39;sha512&#39;, $keyId . $payload, $secret);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Output:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;SHA-512 HMAC Digest: 577a7927f55bc6ed1eaec08f7298e7c7596b6f951c4c6e8f24324fd9a1f0790adfdecbbd5ab73ad543fec7e6c3c23246a5dd8fae526e0b802ae99faccd06a29c
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Call PHP function &lt;a href=&#34;http://php.net/manual/en/function.hash-algos.php&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;hash_algos&lt;/code&gt;&lt;/a&gt; to get a list of supported algorithms.&lt;/p&gt;

&lt;p&gt;How to validate the digest in Java:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;String apiKey = ... // X-KEY
byte[] secret = ... //
String rawPayload = ...
String receivedDigest = ... //
...

Mac digest = Mac.getInstance(&amp;quot;HmacSHA512&amp;quot;);
SecretKeySpec secretKey = new SecretKeySpec(secret, HMAC_SHA_512);

digest.init(secretKey);
digest.update(apiKey.getBytes(StandardCharsets.UTF_8));
digest.update(rawPayload.getBytes(StandardCharsets.UTF_8));
final byte[] expectedDigest = digest.doFinal();
digest.reset();

final byte[] receivedDigestBytes = DatatypeConverter.parseHexBinary(receivedDigest);
if (!MessageDigest.isEqual(receivedDigestBytes, expectedDigest)) {
    // invalid digest
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;references&#34;&gt;References&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://docs.aws.amazon.com/AmazonS3/latest/dev/RESTAuthentication.html#ConstructingTheCanonicalizedResourceElement&#34; title=&#34;Signing and Authenticating REST Requests by Amazon&#34; target=&#34;_blank&#34;&gt;Amazon: Signing and Authenticating REST Requests&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.oclc.org/developer/develop/authentication/hmac-signature.en.html&#34; target=&#34;_blank&#34;&gt;OCLC: HMAC Signature&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://developers.coinbase.com/docs/wallet/api-key-authentication&#34; target=&#34;_blank&#34;&gt;Coinbase: API Key Authentication&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://restcookbook.com/Basics/loggingin/&#34; target=&#34;_blank&#34;&gt;The RESTful CookBook: HMAC&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Booting Spring Webapp</title>
      <link>https://konstantinpavlov.net/blog/2015/02/19/booting-spring-webapp/</link>
      <pubDate>Thu, 19 Feb 2015 23:39:35 +0000</pubDate>
      
      <guid>https://konstantinpavlov.net/blog/2015/02/19/booting-spring-webapp/</guid>
      <description>&lt;p&gt;Spring Boot is an excellent tool to bootstrap java application.
Most of the references mention how to create a standalone java application, optionally with embedded web server (tomcat or jetty). But &lt;a href=&#34;http://projects.spring.io/spring-boot/&#34; title=&#34;Spring Boot Project&#34; target=&#34;_blank&#34;&gt;Spring Boot&lt;/a&gt; supports also creating web applications intended to run within servlet container.

Here is example of maven &lt;em&gt;pom.xml&lt;/em&gt; file for Spring-Boot-enabled web application:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;    ...
    &amp;lt;packaging&amp;gt;war&amp;lt;/packaging&amp;gt;
    &amp;lt;properties&amp;gt;
        &amp;lt;!-- If web.xml is not used --&amp;gt;
        &amp;lt;failOnMissingWebXml&amp;gt;false&amp;lt;/failOnMissingWebXml&amp;gt;
        &amp;lt;!-- Set Spring-Boot Version --&amp;gt;
        &amp;lt;spring-boot.version&amp;gt;1.2.1.RELEASE&amp;lt;/spring-boot.version&amp;gt;
    &amp;lt;/properties&amp;gt;
    &amp;lt;dependencyManagement&amp;gt;
        &amp;lt;dependencies&amp;gt;
            &amp;lt;dependency&amp;gt;
                &amp;lt;!-- Import dependency management from Spring Boot --&amp;gt;
                &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
                &amp;lt;artifactId&amp;gt;spring-boot-dependencies&amp;lt;/artifactId&amp;gt;
                &amp;lt;version&amp;gt;${spring-boot.version}&amp;lt;/version&amp;gt;
                &amp;lt;type&amp;gt;pom&amp;lt;/type&amp;gt;
                &amp;lt;scope&amp;gt;import&amp;lt;/scope&amp;gt;
            &amp;lt;/dependency&amp;gt;
        &amp;lt;/dependencies&amp;gt;
    &amp;lt;/dependencyManagement&amp;gt;
    &amp;lt;dependencies&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;spring-boot-starter-web&amp;lt;/artifactId&amp;gt;
            &amp;lt;exclusions&amp;gt;
                &amp;lt;exclusion&amp;gt;
                    &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
                    &amp;lt;artifactId&amp;gt;spring-boot-starter-tomcat&amp;lt;/artifactId&amp;gt;
                &amp;lt;/exclusion&amp;gt;
            &amp;lt;/exclusions&amp;gt;
        &amp;lt;/dependency&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;!-- Provided in Tomcat --&amp;gt;
            &amp;lt;groupId&amp;gt;javax.servlet&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;javax.servlet-api&amp;lt;/artifactId&amp;gt;
            &amp;lt;scope&amp;gt;provided&amp;lt;/scope&amp;gt;
        &amp;lt;/dependency&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;!-- Provided in Tomcat --&amp;gt;
            &amp;lt;groupId&amp;gt;javax.el&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;javax.el-api&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;2.2.4&amp;lt;/version&amp;gt;
            &amp;lt;scope&amp;gt;provided&amp;lt;/scope&amp;gt;
        &amp;lt;/dependency&amp;gt;
        &amp;lt;!-- Test dependencies --&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;spring-boot-starter-test&amp;lt;/artifactId&amp;gt;
            &amp;lt;scope&amp;gt;test&amp;lt;/scope&amp;gt;
        &amp;lt;/dependency&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;org.glassfish.web&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;javax.el&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;2.2.4&amp;lt;/version&amp;gt;
            &amp;lt;scope&amp;gt;test&amp;lt;/scope&amp;gt;
        &amp;lt;/dependency&amp;gt;        
    &amp;lt;/dependencies&amp;gt;
    ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You&amp;rsquo;ll need a &lt;code&gt;SpringBootServletInitializer&lt;/code&gt; to configure web application:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;@Configuration
@ComponentScan
@EnableAutoConfiguration
public class Application extends SpringBootServletInitializer {

    private static Class&amp;lt;Application&amp;gt; applicationClass = Application.class;

    public static void main(String... args) {
        SpringApplication.run(applicationClass, args);
    }

    @Override
    protected SpringApplicationBuilder configure(SpringApplicationBuilder application) {
        return application.sources(applicationClass);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;HUGOMORE42&lt;/p&gt;

&lt;h2 id=&#34;tuning-configuration&#34;&gt;Tuning Configuration&lt;/h2&gt;

&lt;p&gt;If you want to have a configuration file hierarchy, e.g.:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Default properties (from classpath)&lt;/li&gt;
&lt;li&gt;Environment-specific server properties (from &lt;code&gt;$CATALINA_BASE/conf&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Environment-specific application properties (from &lt;code&gt;$CATALINA_BASE/conf&lt;/code&gt;)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;You may specify &lt;code&gt;spring.config.location&lt;/code&gt; env-entries in &lt;code&gt;web.xml&lt;/code&gt;. Spring Boot will read properties from JNDI.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt;
&amp;lt;web-app xmlns:xsi=&amp;quot;http://www.w3.org/2001/XMLSchema-instance&amp;quot; xmlns=&amp;quot;http://java.sun.com/xml/ns/javaee&amp;quot;
         xsi:schemaLocation=&amp;quot;http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd&amp;quot;
         version=&amp;quot;3.0&amp;quot;&amp;gt;
    &amp;lt;display-na&amp;gt;
    &amp;lt;env-entry&amp;gt;
        &amp;lt;env-entry-name&amp;gt;spring.config.location&amp;lt;/env-entry-name&amp;gt;
        &amp;lt;env-entry-type&amp;gt;java.lang.String&amp;lt;/env-entry-type&amp;gt;
        &amp;lt;env-entry-value&amp;gt;
            classpath:/default.properties,
            file:${catalina.base}/conf/common.properties,
            file:${catalina.base}/conf/my-application.properties
        &amp;lt;/env-entry-value&amp;gt;
    &amp;lt;/env-entry&amp;gt;
&amp;lt;/web-app&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;references&#34;&gt;References&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://spring.io/blog/2014/03/07/deploying-spring-boot-applications#what-about-the-java-ee-application-server&#34; title=&#34;Deploying Spring Boot Applications: What about the Java EE Application Server?&#34; target=&#34;_blank&#34;&gt;Deploying Spring Boot Applications: What about the Java EE Application Server?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://docs.spring.io/spring-boot/docs/current/reference/html/common-application-properties.html&#34; title=&#34;Spring Boot: Common application properties&#34; target=&#34;_blank&#34;&gt;Spring Boot application properties&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Base64 Variants in Java 8</title>
      <link>https://konstantinpavlov.net/blog/2015/01/24/base64-variants-in-java-8/</link>
      <pubDate>Sat, 24 Jan 2015 04:45:10 +0000</pubDate>
      
      <guid>https://konstantinpavlov.net/blog/2015/01/24/base64-variants-in-java-8/</guid>
      <description>&lt;p&gt;You most likely used Base64 encoding. It&amp;rsquo;s about encoding any sequence of data as a printable string (digits, lower case and upper case letters). But Base64 has variations. E.g., not every Base64 variant allows safe transfer of any data as URL parameters.
For that purpose there is a special dialect of Base64: Url-safe encoding.

Since Java 8 you may use class &lt;a href=&#34;http://docs.oracle.com/javase/8/docs/api/java/util/Base64.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;java.util.Base64&lt;/code&gt;&lt;/a&gt; for encoding and decoding.
It supports Basic, URL and Filename Safe and MIME-encoded variants, as specified in &lt;a href=&#34;http://www.ietf.org/rfc/rfc4648.txt&#34; target=&#34;_blank&#34;&gt;RFC 4648&lt;/a&gt; and &lt;a href=&#34;http://www.ietf.org/rfc/rfc2045.txt&#34; target=&#34;_blank&#34;&gt;RFC 2045&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;Base64.Encoder encoder = java.util.Base64.getUrlEncoder().withoutPadding();
String base64String = encoder.encodeToString(byteArray);
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>Conditional Java Configurations in Spring Framework</title>
      <link>https://konstantinpavlov.net/blog/2014/12/14/conditional-java-configurations-in-spring-framework/</link>
      <pubDate>Sun, 14 Dec 2014 11:22:29 +0000</pubDate>
      
      <guid>https://konstantinpavlov.net/blog/2014/12/14/conditional-java-configurations-in-spring-framework/</guid>
      <description>&lt;p&gt;Spring Framework offers very flexible means for binding application components.
Externalizable properties, composite configuration, nested application contexts and profiles.&lt;/p&gt;

&lt;!-- 
profile
:    A profile is a named logical grouping that may be activated programmatically via [`ConfigurableEnvironment.setActiveProfiles(java.lang.String...)`](http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/core/env/ConfigurableEnvironment.html#setActiveProfiles-java.lang.String...-) or declaratively through setting the `spring.profiles.active` property, usually through JVM system properties, as an environment variable, or for web applications as a Servlet context parameter in `web.xml` file.
 --&gt;

&lt;p&gt;Sometimes, it is necessary to control whether particular beans or &lt;a href=&#34;http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/context/annotation/Configuration.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;@Configuration&lt;/code&gt;&lt;/a&gt; will be loaded or not. Spring Framework v.4.1.x does not provide that feature out of the box. But, hopefully, Spring allows conditional bean initialization (see &lt;a href=&#34;http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/context/annotation/Profile.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;@Profile&lt;/code&gt;&lt;/a&gt; implementation and &lt;a href=&#34;http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/beans/factory/annotation/Configurable.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;@Configurable&lt;/code&gt;&lt;/a&gt;).
So, I created the annotation &lt;a href=&#34;https://github.com/kpavlov/commons-spring/blob/master/src/main/java/com/github/kpavlov/commons/spring/annotations/Enabled.java&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;@Enabled&lt;/code&gt;&lt;/a&gt; which allows me to control bean instantiation via properties.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;@Enabled&lt;/code&gt; indicates that a component is eligible for registration when evaluated expression is true. This annotation should be used in conjunction with Configuration and Bean annotations.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h2 id=&#34;usage-example&#34;&gt;Usage Example&lt;/h2&gt;

&lt;p&gt;Given property file &lt;code&gt;application.properties&lt;/code&gt; with property values &lt;code&gt;my.service.enabled&lt;/code&gt; and &lt;code&gt;my.config.enabled&lt;/code&gt;. Following code will only instantiate and configure &lt;code&gt;MyService&lt;/code&gt; and &lt;code&gt;MyConfig&lt;/code&gt; if values of appropriate properties are evaluated as true.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;@Configuration
@PropertySource}(&amp;quot;classpath:/application.properties&amp;quot;)
@Import(MyConfig.class)
class AppConfig {

    @Bean
    @Enabled(&amp;quot;${my.service.enabled}&amp;quot;)
    MyService myService {
        return new MyService()
    }
}

@Configuration
@Enabled(&amp;quot;${my.config.enabled}&amp;quot;)
class MyConfig {
    ...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Link: &lt;a href=&#34;https://github.com/kpavlov/commons-spring&#34; title=&#34;Project on GitHub&#34; target=&#34;_blank&#34;&gt;project on GitHub&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Update: &lt;a href=&#34;http://docs.spring.io/spring-boot/docs/current/reference/html/boot-features-developing-auto-configuration.html&#34; target=&#34;_blank&#34;&gt;spring-boot-conditionals&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>JDBC Driver Settings for Oracle RAC</title>
      <link>https://konstantinpavlov.net/blog/2014/12/07/jdbc-driver-settings-for-oracle-rac/</link>
      <pubDate>Sun, 07 Dec 2014 21:22:41 +0000</pubDate>
      
      <guid>https://konstantinpavlov.net/blog/2014/12/07/jdbc-driver-settings-for-oracle-rac/</guid>
      <description>&lt;p&gt;If you are modifying your java application to use Oracle Real Application Clustered (RAC) Database instead of standard single-node database server (Express or Standard edition), then you need to modify settings of your JDBC driver.
&lt;/p&gt;

&lt;h2 id=&#34;oracle-thin-driver&#34;&gt;Oracle Thin Driver&lt;/h2&gt;

&lt;p&gt;Oracle thin driver&amp;rsquo;s jdbc URL needs to be changed:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;jdbc:oracle:thin:@(DESCRIPTION=(ADDRESS_LIST=(LOAD_BALANCE=OFF)(FAILOVER=ON)
(ADDRESS=(PROTOCOL=TCP)(HOST=tst-db1.myco.com)(PORT=1604))
(ADDRESS=(PROTOCOL=TCP)(HOST=tst-db2.myco.com)(PORT=1604)))
(CONNECT_DATA=SERVICE_NAME=mydb1.myco.com)(SERVER=DEDICATED)))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Also, it is highly recommended to use LDAP directory server instead of hardcoding hostnames into configuration directly:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The point of a tnsnames file, the older Oracle Names server, and the newer, recommended LDAP directory server method of resolving database names is to avoid having to hardcode hostnames, addresses, ports, etc. into your connection string. The DBAs should be able to move the database to a new host or port without breaking anything. The best way to set your thin connect URL is with the following syntax:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;jdbc:oracle:thin:@ldap://&amp;lt;OID server name&amp;gt;:&amp;lt;OID port&amp;gt;/&amp;lt;DB SID or Service Name&amp;gt;,cn=OracleContext,dc=&amp;lt;yourdomain&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&#34;http://stackoverflow.com/questions/1646630/jdbc-what-is-the-correct-jdbc-url-to-connect-to-a-rac-database&#34; target=&#34;_blank&#34;&gt;stackoverflow&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;links&#34;&gt;Links&lt;/h2&gt;

&lt;p&gt;More detailed information on configuring JDBC driver for RAC you may find on the Oracle&amp;rsquo;s site:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.oracle.com/database/121/JJUCP/rac.htm#JJUCP8197&#34; title=&#34;UCP RAC Features&#34; target=&#34;_blank&#34;&gt;Using UCP RAC Features&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.oracle.com/database/121/JJDBC/instclnt.htm#JJDBC28217&#34; target=&#34;_blank&#34;&gt;OCI JDBC Driver Specific Features&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.oracle.com/database/121/JJDBC/&#34; title=&#34;Database JDBC Developer&#39;s Guide&#34; target=&#34;_blank&#34;&gt;JDBC Developer&amp;rsquo;s Guide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.oracle.com/database/121/JJDBC/&#34; title=&#34;Database JDBC Developer&#39;s Guide&#34; target=&#34;_blank&#34;&gt;Universal Connection Pool(UCP) for JDBC Developer&amp;rsquo;s Guide&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>JAX-WS with Custom SSLSocketFactory</title>
      <link>https://konstantinpavlov.net/blog/2014/12/01/jax-ws-with-custom-sslsocketfactory/</link>
      <pubDate>Mon, 01 Dec 2014 14:34:00 +0000</pubDate>
      
      <guid>https://konstantinpavlov.net/blog/2014/12/01/jax-ws-with-custom-sslsocketfactory/</guid>
      <description>&lt;p&gt;It&amp;rsquo;s very easy to configure custom &lt;a href=&#34;https://docs.oracle.com/javase/8/docs/api/javax/net/ssl/SSLSocketFactory.html&#34; target=&#34;_blank&#34;&gt;SSLSocketFactory&lt;/a&gt; for JAX-WS web-service: just specify custom property referring to &lt;code&gt;SSLSocketFactory&lt;/code&gt; bean.
But there is a nuance&amp;hellip;&lt;/p&gt;

&lt;p&gt;In SpringFramework you may setup web service port with following XML configuration:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;bean id=&amp;quot;myPort&amp;quot; class=&amp;quot;org.springframework.remoting.jaxws.JaxWsPortProxyFactoryBean&amp;quot;&amp;gt;
    &amp;lt;property name=&amp;quot;serviceInterface&amp;quot; value=&amp;quot;com.example.ServicePortInterface&amp;quot;/&amp;gt;
    &amp;lt;property name=&amp;quot;wsdlDocumentResource&amp;quot; value=&amp;quot;classpath:wsdl/MyService.wsdl&amp;quot;/&amp;gt;
    &amp;lt;property name=&amp;quot;namespaceUri&amp;quot; value=&amp;quot;urn:MyServer&amp;quot;/&amp;gt;
    &amp;lt;property name=&amp;quot;serviceName&amp;quot; value=&amp;quot;MyServerService&amp;quot;/&amp;gt;
    &amp;lt;property name=&amp;quot;endpointAddress&amp;quot; value=&amp;quot;${my.service.url}&amp;quot;/&amp;gt;
    &amp;lt;property name=&amp;quot;customProperties&amp;quot;&amp;gt;
        &amp;lt;map key-type=&amp;quot;java.lang.String&amp;quot;&amp;gt;
            &amp;lt;entry key=&amp;quot;com.sun.xml.ws.transport.https.client.SSLSocketFactory&amp;quot;
                   value-ref=&amp;quot;mySslSocketFactoryBean&amp;quot;/&amp;gt;
        &amp;lt;/map&amp;gt;
    &amp;lt;/property&amp;gt;
&amp;lt;/bean&amp;gt;

&amp;lt;!--  My bean implements javax.net.ssl.SSLSocketFactory --&amp;gt;
&amp;lt;bean id=&amp;quot;mySslSocketFactoryBean&amp;quot; .../&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The code above will work if you are using JAX-WS reference implementation but will not work with JAX-WS bundled in Oracle JDK. For that case you need to set a custom property named &lt;code&gt;&amp;quot;com.sun.xml.internal.ws.transport.https.client.SSLSocketFactory&amp;quot;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;That&amp;rsquo;s confusing, but you should use a property name defined in the &lt;code&gt;JAXWSProperties&lt;/code&gt; class of JAX-WS implementation of your choice. For example:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://jax-ws.java.net/nonav/2.2.8/javadocs/rt/com/sun/xml/ws/developer/JAXWSProperties.html#SSL_SOCKET_FACTORY&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;com.sun.xml.ws.developer.JAXWSProperties.SSL_SOCKET_FACTORY&lt;/code&gt;&lt;/a&gt; &amp;ndash; if you&amp;rsquo;re using JAXWS-RI implementation;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;com.sun.xml.internal.ws.developer.JAXWSProperties.SSL_SOCKET_FACTORY&lt;/code&gt; &amp;ndash; for Oracle JDK implementation;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;weblogic.wsee.jaxws.JAXWSProperties.SSL_SOCKET_FACTORY&lt;/code&gt; &amp;ndash; for WebLogic server&amp;rsquo;s implementation.
&amp;hellip;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So find a &lt;code&gt;JAXWSProperties&lt;/code&gt; and use a value of constant &lt;code&gt;SSL_SOCKET_FACTORY&lt;/code&gt; in JAX-WS binding custom properties.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>WebJars: Easy Packaging Client Libraries</title>
      <link>https://konstantinpavlov.net/blog/2014/07/20/webjars-easy-packaging-client-libraries/</link>
      <pubDate>Sun, 20 Jul 2014 22:00:48 +0300</pubDate>
      
      <guid>https://konstantinpavlov.net/blog/2014/07/20/webjars-easy-packaging-client-libraries/</guid>
      <description>&lt;p&gt;When developing java web application it is often annoying to manage third-party javascript libraries. Especially, when it is necessary to upgrade some of them.&lt;/p&gt;

&lt;p&gt;The project &lt;a href=&#34;http://www.webjars.org/&#34; target=&#34;_blank&#34;&gt;&amp;laquo;WebJars&amp;raquo;&lt;/a&gt; makes a life easier for such &lt;del&gt;lazy&lt;/del&gt;efficient developers, like me :-)&lt;/p&gt;

&lt;p&gt;There is a wide range of popular javascript libraries packaged int Jar archives and ready to be included as a dependencies into your project.
It is described in the &lt;a href=&#34;http://www.webjars.org/documentation&#34; target=&#34;_blank&#34;&gt;documentation&lt;/a&gt; how to configure resource mapping in a web framework of your choice.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Jolokia: HTTP/JSON bridge for JMX</title>
      <link>https://konstantinpavlov.net/blog/2014/06/09/jolokia-http/json-bridge-for-jmx/</link>
      <pubDate>Mon, 09 Jun 2014 13:17:37 +0300</pubDate>
      
      <guid>https://konstantinpavlov.net/blog/2014/06/09/jolokia-http/json-bridge-for-jmx/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://upload.wikimedia.org/wikipedia/commons/thumb/6/69/BhutJolokia09_Asit.jpg/640px-BhutJolokia09_Asit.jpg&#34; alt=&#34;Jolokia Logo&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Very often there is a need to monitor the Java application server.
For example, external monitoring tool, like Nagious/Zenoss/Zabbix needs to get some metrics, like heap memory usage or thread count.&lt;/p&gt;

&lt;p&gt;Usual way to get that metrics is to setup access to application server via JMX.&lt;/p&gt;

&lt;p&gt;But, sometimes, it is not possible to leave some other port opened for JMX and the only port available is HTTP(80 or 8080) or HTTPS(443 or 8443).&lt;/p&gt;

&lt;p&gt;Here the &lt;a href=&#34;http://www.jolokia.org&#34; title=&#34;Jolokia Project&#34; target=&#34;_blank&#34;&gt;Jolokia&lt;/a&gt; comes to rescue!
&lt;/p&gt;

&lt;p&gt;Jolokia is a HTTP/JSON bridge for JMX server. It can be deployed as web archive (.war) to servlet container and expose MBeans via HTTP.&lt;/p&gt;

&lt;p&gt;Also, it is quite lightweight - only 285K for webarchive.&lt;/p&gt;

&lt;h2 id=&#34;configuration&#34;&gt;Configuration&lt;/h2&gt;

&lt;p&gt;Here is a small instruction how to get an access to JMX beans in &lt;a href=&#34;../../tags/tomcat&#34;&gt;Tomcat&lt;/a&gt; via &lt;a href=&#34;http://www.jolokia.org&#34; title=&#34;Jolokia Project&#34; target=&#34;_blank&#34;&gt;Jolokia&lt;/a&gt;.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;http://www.jolokia.org/download.html&#34; target=&#34;_blank&#34;&gt;Download&lt;/a&gt; &lt;code&gt;jolockia.war&lt;/code&gt; and deploy it to servlet container.&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Run in command line:

$ curl localhost:8080/jolokia/read/java.lang:type=Memory/HeapMemoryUsage
{&#34;request&#34;:{&#34;mbean&#34;:&#34;java.lang:type=Memory&#34;,&#34;attribute&#34;:&#34;HeapMemoryUsage&#34;,&#34;type&#34;:&#34;read&#34;},&#34;value&#34;:{&#34;init&#34;:536870912,&#34;committed&#34;:514850816,&#34;max&#34;:514850816,&#34;used&#34;:132049768},&#34;timestamp&#34;:1402310991,&#34;status&#34;:200}
$ curl localhost:8080/jolokia/read/java.lang:type=Memory/HeapMemoryUsage/used
{&#34;request&#34;:{&#34;path&#34;:&#34;used&#34;,&#34;mbean&#34;:&#34;java.lang:type=Memory&#34;,&#34;attribute&#34;:&#34;HeapMemoryUsage&#34;,&#34;type&#34;:&#34;read&#34;},&#34;value&#34;:132049736,&#34;timestamp&#34;:1402310735,&#34;status&#34;:200}

You may also use your browser to see JSON response. I suggest installing &lt;a href=&#34;https://chrome.google.com/webstore/detail/json-formatter/bcjindcccaagfpapjjmafapmmgkkhgoa&#34; title=&#34;JSON Formatter Chrome Extension&#34; target=&#34;_blank&#34;&gt;JSON Fromamter&lt;/a&gt; for better view. &lt;img src=&#34;../../assets/2014/06/jolokia-heap.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Now you can configure your monitoring software to ping server periodically and parse &amp;laquo;value&amp;raquo; attribute from JSON response.&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Released version of Jolokia are available in &lt;a href=&#34;https://search.maven.org/#search%7Cga%7C1%7Cg%3A%22org.jolokia%22&#34; target=&#34;_blank&#34;&gt;central maven repository&lt;/a&gt;:

&lt;dependency&gt;
	&lt;groupId&gt;org.jolokia&lt;/groupId&gt;
	&lt;artifactId&gt;jolokia-war&lt;/artifactId&gt;
	&lt;version&gt;1.2.1&lt;/version&gt;
&lt;/dependency&gt;
&lt;/p&gt;

&lt;p&gt;Also, Jolokia provides OSGi, Mule and JVM &lt;a href=&#34;http://www.jolokia.org/reference/html/agents.html&#34; target=&#34;_blank&#34;&gt;agents&lt;/a&gt; as well as Webarchive (War) agent.&lt;/p&gt;

&lt;h2 id=&#34;links&#34;&gt;Links&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.jolokia.org&#34; title=&#34;Jolokia Project&#34; target=&#34;_blank&#34;&gt;Jolokia Project Home&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/rhuss/jolokia&#34; title=&#34;Jolokia on GitHub&#34; target=&#34;_blank&#34;&gt;Jolokia Project on GitHub&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>JSON Validation with JSON Schema</title>
      <link>https://konstantinpavlov.net/blog/2014/05/10/json-validation-with-json-schema/</link>
      <pubDate>Sat, 10 May 2014 15:48:12 +0300</pubDate>
      
      <guid>https://konstantinpavlov.net/blog/2014/05/10/json-validation-with-json-schema/</guid>
      <description>&lt;p&gt;JSON has became a de-facto standard for webservices, replacing XML web services.
It has native support in web browser clients.&lt;/p&gt;

&lt;p&gt;That makes JSON is the standard of choice for UI-oriented services.
It has a good support on mobile devices.
Also, it provides smaller data payload size compared to XML and it&amp;rsquo;s very sufficient for high-load systems as it saves a traffic.
But what is for data validation?
For XML web services there is a XML Schema.
It comes ti mind, that similar standard for JSON should be called &lt;a href=&#34;http://json-schema.org/&#34; target=&#34;_blank&#34;&gt;&amp;laquo;JSON Schema&amp;raquo;&lt;/a&gt;.
And it really exists!&lt;/p&gt;

&lt;p&gt;
There are a number of &lt;a href=&#34;http://json-schema.org/implementations.html&#34; target=&#34;_blank&#34;&gt;libraries&lt;/a&gt; for working with JSON Schema, including validators, documentation generators and data processing.&lt;/p&gt;

&lt;p&gt;For java, there is a library which implements JSON message validation: &lt;a href=&#34;https://github.com/fge/json-schema-validator&#34; target=&#34;_blank&#34;&gt;json-schema-validator&lt;/a&gt;.
It uses &lt;a href=&#34;https://github.com/FasterXML/jackson&#34; target=&#34;_blank&#34;&gt;jackson&lt;/a&gt; library as its&amp;rsquo; core and can be used in any java environment.&lt;/p&gt;

&lt;p&gt;Here is demo application project: &lt;a href=&#34;https://github.com/fge/json-schema-validator-demo&#34; target=&#34;_blank&#34;&gt;json-schema-validator-demo&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Code sample:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;import com.fasterxml.jackson.databind.JsonNode;
import com.github.fge.jsonschema.main.JsonValidator;
import com.github.fge.jsonschema.main.JsonSchemaFactory;
import com.github.fge.jsonschema.core.report.ProcessingReport;
import com.github.fge.jsonschema.core.util.AsJson;
...

JsonValidator VALIDATOR  = JsonSchemaFactory.byDefault().getValidator();

JsonNode schemaNode = ...
JsonNode data = ...

ProcessingReport report = VALIDATOR.validateUnchecked(schemaNode, data);

final boolean success = report.isSuccess();

final JsonNode reportAsJson = ((AsJson) report).asJson();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Demo applicaiton: &lt;a href=&#34;https://json-schema-validator.herokuapp.com/&#34; target=&#34;_blank&#34;&gt;https://json-schema-validator.herokuapp.com/&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Webapp Inter-Communication in Tomcat</title>
      <link>https://konstantinpavlov.net/blog/2014/05/09/webapp-inter-communication-in-tomcat/</link>
      <pubDate>Fri, 09 May 2014 22:40:12 +0300</pubDate>
      
      <guid>https://konstantinpavlov.net/blog/2014/05/09/webapp-inter-communication-in-tomcat/</guid>
      <description>&lt;p&gt;&lt;em&gt;Sometimes you need to access services deployed in one web application from another web application within same application server. For Tomcat there is not so many options to do it. In this article we&amp;rsquo;ll discuss you how to use JMX for communication between web applications.&lt;/em&gt;
&lt;/p&gt;

&lt;p&gt;When both web applications are deployed on the same &lt;a href=&#34;http://tomcat.apache.org&#34; title=&#34;Apache Tomcat&#34; target=&#34;_blank&#34;&gt;Tomcat server&lt;/a&gt; instance there are, at least, two options to communicate between them:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Create a JAX-WS or RESTful webservice in A.war and invoke it via http client from B.war&lt;/li&gt;
&lt;li&gt;Expose a service as managed bean in A.war and invoke it via JMX from B.war&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;There are at least two disadvantage of the first approach:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Your webservice becomes available to the public and there is a security risk unless you protect access to that service, if you care about this.&lt;/li&gt;
&lt;li&gt;Web service invocation is not free. Marshalling/unmarshalling is required.&lt;/li&gt;
&lt;li&gt;You&amp;rsquo;ll have to write a service endpoint class.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;But there is an advantage:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;You may choose deploy your service to different Tomcat. It will not require much work to reconfigure your services.&lt;/li&gt;
&lt;li&gt;You should not care about classloader issues.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Second solution uses existing server infrastructure. It also may cause a security risk if your JMX services are accessible by remote clients. But it is not often a case, or JMX is usually not as vulnerable as HTTP port.
Also, you may not warry about marshalling/unmarshalling or serialisation/deserializartion.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s discuss a third solution (JMX) in details.&lt;/p&gt;

&lt;h2 id=&#34;exposing-and-accessing-managed-beans-with-springframework&#34;&gt;Exposing and Accessing Managed Beans with SpringFramework&lt;/h2&gt;

&lt;p&gt;Tomcat has it&amp;rsquo;s own JMX Server and &lt;a href=&#34;http://springframework.org&#34; target=&#34;_blank&#34;&gt;SpringFramework&lt;/a&gt; has JMX exporter feature out of the box.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s start with simple example.
We&amp;rsquo;ll create first web application &lt;code&gt;service.war&lt;/code&gt; exposing &lt;a href=&#34;https://gist.github.com/kpavlov/3e19dcec52b56d550e21#file-api-jar-echoservice&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;EchoService&lt;/code&gt;&lt;/a&gt; via JMX.
Then we&amp;rsquo;ll access that service in a second web application &lt;code&gt;ui.war&lt;/code&gt; from within a servlet.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s create a maven project with 3 modules:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;modules&amp;gt;
    &amp;lt;module&amp;gt;api.jar&amp;lt;/module&amp;gt;
    &amp;lt;module&amp;gt;service.war&amp;lt;/module&amp;gt;
    &amp;lt;module&amp;gt;ui.war&amp;lt;/module&amp;gt;
&amp;lt;/modules&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;First module, &lt;em&gt;api.jar&lt;/em&gt;, will contain a service interface, &lt;code&gt;EchoService&lt;/code&gt; which is pretty simple
(here and later imports are omitted):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;public interface EchoService {

    public static final String MBEAN_NAME = &amp;quot;com.example:type=service,name=EchoService&amp;quot;;

    String echo(String input);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Second module, &lt;em&gt;service.war&lt;/em&gt;, will contain a &lt;a href=&#34;https://gist.github.com/kpavlov/3e19dcec52b56d550e21#file-service-war-echoserviceimpl&#34; target=&#34;_blank&#34;&gt;service implementation class&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;@ManagedResource(objectName = EchoService.MBEAN_NAME)
public class EchoServiceImpl implements EchoService {

    @Override
    @ManagedOperation
    public String echo(String input) {
        return &amp;quot;You said: &amp;quot; + input;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&amp;hellip; as well as Spring configuration file &lt;em&gt;services-context.xml&lt;/em&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt;
&amp;lt;beans xmlns=&amp;quot;http://www.springframework.org/schema/beans&amp;quot;
       xmlns:xsi=&amp;quot;http://www.w3.org/2001/XMLSchema-instance&amp;quot;
       xmlns:context=&amp;quot;http://www.springframework.org/schema/context&amp;quot;
       xsi:schemaLocation=&amp;quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd&amp;quot;&amp;gt;

    &amp;lt;context:annotation-config/&amp;gt;
    &amp;lt;context:mbean-export/&amp;gt;

    &amp;lt;bean id=&amp;quot;echoService&amp;quot; class=&amp;quot;com.example.service.EchoServiceImpl&amp;quot;/&amp;gt;

&amp;lt;/beans&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here the &lt;a href=&#34;http://docs.spring.io/spring/docs/3.2.x/spring-framework-reference/html/jmx.html&#34; target=&#34;_blank&#34;&gt;JMX export feature&lt;/a&gt;
of &lt;a href=&#34;http://springframework.org&#34; target=&#34;_blank&#34;&gt;SpringFramework&lt;/a&gt; is used.&lt;/p&gt;

&lt;p&gt;And a &lt;em&gt;web.xml&lt;/em&gt; descriptor is:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;web-app xmlns=&amp;quot;http://java.sun.com/xml/ns/javaee&amp;quot;
         xmlns:xsi=&amp;quot;http://www.w3.org/2001/XMLSchema-instance&amp;quot;
         xsi:schemaLocation=&amp;quot;http://java.sun.com/xml/ns/javaee
          http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd&amp;quot;
         version=&amp;quot;3.0&amp;quot;&amp;gt;

    &amp;lt;display-name&amp;gt;Servlet 3.0 Web Application&amp;lt;/display-name&amp;gt;

    &amp;lt;context-param&amp;gt;
        &amp;lt;param-name&amp;gt;contextConfigLocation&amp;lt;/param-name&amp;gt;
        &amp;lt;param-value&amp;gt;classpath:/services-context.xml&amp;lt;/param-value&amp;gt;
    &amp;lt;/context-param&amp;gt;

    &amp;lt;listener&amp;gt;
        &amp;lt;listener-class&amp;gt;org.springframework.web.context.ContextLoaderListener&amp;lt;/listener-class&amp;gt;
    &amp;lt;/listener&amp;gt;
&amp;lt;/web-app&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Third module, &lt;em&gt;ui.war&lt;/em&gt;, will contain a servlet, which will use the service:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;@WebServlet(urlPatterns = &amp;quot;/echo/*&amp;quot;)
public class EchoServlet extends HttpServlet {

    @Autowired
    private EchoService echoService;

    @Override
    public void init(ServletConfig config) throws ServletException {
        SpringBeanAutowiringSupport.processInjectionBasedOnServletContext(this,
                config.getServletContext());
        System.out.println(&amp;quot;Servlet initialized&amp;quot;);
    }

    @Override
    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {

        final String input = req.getPathInfo();

        final String output = echoService.echo(input);

        resp.setBufferSize(1024);
        resp.setStatus(HttpServletResponse.SC_OK);
        resp.setContentType(&amp;quot;text/plain&amp;quot;);
        resp.setCharacterEncoding(&amp;quot;UTF-8&amp;quot;);
        resp.getWriter().write(output);
        resp.getWriter().close();
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;spring context configuration &lt;em&gt;web-context.xml&lt;/em&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;    &amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt;
    &amp;lt;beans xmlns=&amp;quot;http://www.springframework.org/schema/beans&amp;quot;
           xmlns:xsi=&amp;quot;http://www.w3.org/2001/XMLSchema-instance&amp;quot;
           xmlns:util=&amp;quot;http://www.springframework.org/schema/util&amp;quot;
           xsi:schemaLocation=&amp;quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd   http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd&amp;quot;&amp;gt;

        &amp;lt;bean id=&amp;quot;echoService&amp;quot; class=&amp;quot;org.springframework.jmx.access.MBeanProxyFactoryBean&amp;quot; lazy-init=&amp;quot;true&amp;quot;&amp;gt;
            &amp;lt;property name=&amp;quot;objectName&amp;quot;&amp;gt;
                &amp;lt;util:constant static-field=&amp;quot;com.example.service.EchoService.MBEAN_NAME&amp;quot;/&amp;gt;
            &amp;lt;/property&amp;gt;
            &amp;lt;property name=&amp;quot;proxyInterface&amp;quot; value=&amp;quot;com.example.service.EchoService&amp;quot;/&amp;gt;
        &amp;lt;/bean&amp;gt;

    &amp;lt;/beans&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;web.xml&lt;/em&gt; descriptor:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;    &amp;lt;web-app xmlns=&amp;quot;http://java.sun.com/xml/ns/javaee&amp;quot;
             xmlns:xsi=&amp;quot;http://www.w3.org/2001/XMLSchema-instance&amp;quot;
             xsi:schemaLocation=&amp;quot;http://java.sun.com/xml/ns/javaee
              http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd&amp;quot;
             version=&amp;quot;3.0&amp;quot;&amp;gt;

        &amp;lt;display-name&amp;gt;Servlet 3.0 Web Application&amp;lt;/display-name&amp;gt;

        &amp;lt;context-param&amp;gt;
            &amp;lt;param-name&amp;gt;contextConfigLocation&amp;lt;/param-name&amp;gt;
            &amp;lt;param-value&amp;gt;WEB-INF/web-context.xml&amp;lt;/param-value&amp;gt;
        &amp;lt;/context-param&amp;gt;

        &amp;lt;listener&amp;gt;
            &amp;lt;listener-class&amp;gt;org.springframework.web.context.ContextLoaderListener&amp;lt;/listener-class&amp;gt;
        &amp;lt;/listener&amp;gt;
    &amp;lt;/web-app&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When those two webapps are deployed to tomcat, a new JMX bean is created:
&lt;img src=&#34;../../assets/2014/05/tomcat-mbean-service.png&#34; alt=&#34;EchoService exposed as Managed Bean&#34; /&gt;&lt;/p&gt;

&lt;p&gt;and service is accessible from the servlet:
&lt;img src=&#34;../../assets/2014/05/tomcat-service-invoked.png&#34; alt=&#34;EchoServlet showing results of EchoService invocation&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;module-dependencies&#34;&gt;Module dependencies&lt;/h3&gt;

&lt;p&gt;All web modules should depend on &lt;em&gt;api.jar&lt;/em&gt; module, because it contains a service interface.&lt;/p&gt;

&lt;p&gt;While your service method signatures contains only standard java classes, available across the Tomcat server,
you may not care about classloading issues. In this case both &lt;em&gt;service.war&lt;/em&gt; and &lt;em&gt;ui.war&lt;/em&gt; should contain &lt;em&gt;api.jar&lt;/em&gt; as a dependency in their &lt;code&gt;WEB-INF/lib&lt;/code&gt; directory.&lt;/p&gt;

&lt;p&gt;But if you want to return from your service method some custom class,
you&amp;rsquo;ll need to put that class to &lt;em&gt;api.jar&lt;/em&gt; and place that JAR to &lt;code&gt;${catalina.base}/lib&lt;/code&gt; folder to make that classes available to all web applications. In this case &lt;em&gt;api.jar&lt;/em&gt; should be declared as &lt;em&gt;provided&lt;/em&gt; dependency in webapp modules.&lt;/p&gt;

&lt;p&gt;Having sharing classes in a common classloader eliminates the need of data serialization/deserialization.&lt;/p&gt;

&lt;p&gt;Sources from this article you may find &lt;a href=&#34;https://gist.github.com/kpavlov/3e19dcec52b56d550e21&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>